"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(
  if: Boolean = true
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type ActivityReport {
  _id: ID!
  Timestamp: Int!
  Qty: Int!
  AvgGain: Float!
  TopAGain: Float
  TopBGain: Float
  TopCGain: Float
  FearGreedIndex: Int!
}

type HistoricPrices {
  Pair: [Pair!]
  Timestamp: Int!
}

input MarkAsTestedInput {
  BotInstanceName: String!
  Tested: Boolean!
}

type Mutation {
  """
  Creates a new market Activity Report
  """
  createActivityReport(input: NewActivityReport): ActivityReport!

  """
  Creates a new Trade Outcome Report
  """
  createTradeOutcomeReport(input: NewTradeOutcomeReport): TradeOutcomeReport!

  """
  Deletes outcome reports for the matching given timestamp
  """
  deleteOutcomeReports(Timestamp: Int!): Boolean!

  """
  Creates a New strategy
  """
  createStrategy(input: StrategyInput!): Strategy

  """
  Updates the strategy you have provided the name for
  """
  updateStrategy(BotInstanceName: String!, input: StrategyInput!): Strategy

  """
  Deletes strategy for the given bot Name
  """
  deleteStrategy(BotInstanceName: String!): Boolean

  """
  Updates the outcome counters and account balance help on the strategy object
  """
  updateCounters(input: UpdateCountersInput!): Boolean

  """
  Set the Tested boolen value by bot Name
  """
  markAsTested(input: MarkAsTestedInput!): Boolean

  """
  Creates an array of Historic Price pairs
  """
  createHistoricPrices(input: NewHistoricPriceInput): [HistoricPrices!]!

  """
  Deletes all prices data for the matching given timestamp
  """
  deleteHistoricPrices(Timestamp: Int!): Boolean!
}

input NewActivityReport {
  Timestamp: Int!
  Qty: Int!
  AvgGain: Float!
  TopAGain: Float
  TopBGain: Float
  TopCGain: Float
  FearGreedIndex: Int!
}

input NewHistoricPriceInput {
  pairs: [PairInput!]!
  Timestamp: Int!
}

input NewTradeOutcomeReport {
  Timestamp: Int!
  BotName: String!
  PercentageChange: Float!
  Balance: Float!
  Symbol: String!
  Outcome: String!
  Fee: Float
  ElapsedTime: Int!
  Volume: Float!
  FearGreedIndex: Int!
  MarketStatus: String!
}

type Pair {
  Symbol: String!
  Price: String!
}

input PairInput {
  Symbol: String!
  Price: String!
}

type Query {
  """
  Get activity reports by ID
  """
  ActivityReport(_id: ID!): ActivityReport!

  """
  Get All activity reports
  """
  ActivityReports: [ActivityReport!]!

  """
  Get Trade Outcome reports by ID
  """
  TradeOutcomeReport(_id: ID!): TradeOutcomeReport!

  """
  Get Trade Outcome reports by Bot Name
  """
  TradeOutcomes(BotName: String!): [TradeOutcomeReport!]!

  """
  Get Trade Outcome reports by giving Bot Name, Market Status & a given limit
  """
  TradeOutcomesInFocus(
    BotName: String!
    MarketStatus: String!
    limit: Int
  ): [TradeOutcomeReport!]!

  """
  Get All Trade Outcome reports
  """
  TradeOutcomeReports: [TradeOutcomeReport!]!

  """
  Get Stategy by Bot Name
  """
  getStrategyByName(BotInstanceName: String!): Strategy

  """
  Get all strategies
  """
  getAllStrategies: [Strategy]

  """
  Fetches price data for a given symbol up to a given limit of records
  """
  getHistoricPrice(symbol: String!, limit: Int): [HistoricPrices!]!

  """
  Gets all prices data at a given timestamp
  """
  getHistoricPricesAtTimestamp(Timestamp: Int!): [HistoricPrices!]!

  """
  Returns a count of timestamps in the DB
  """
  getUniqueTimestampCount: Int!
}

type Strategy {
  BotInstanceName: String!
  TradeDuration: Int!
  IncrementsATR: Int!
  LongSMADuration: Int!
  ShortSMADuration: Int!
  WINCounter: Int
  LOSSCounter: Int
  TIMEOUTGainCounter: Int
  TIMEOUTLossCounter: Int
  NetGainCounter: Int
  NetLossCounter: Int
  AccountBalance: Float!
  MovingAveMomentum: Float!
  TakeProfitPercentage: Float
  StopLossPercentage: Float
  ATRtollerance: Float
  FeesTotal: Float
  Tested: Boolean
  Owner: String
  CreatedOn: Int!
}

input StrategyInput {
  BotInstanceName: String!
  TradeDuration: Int!
  IncrementsATR: Int!
  LongSMADuration: Int!
  ShortSMADuration: Int!
  WINCounter: Int
  LOSSCounter: Int
  TIMEOUTGainCounter: Int
  TIMEOUTLossCounter: Int
  NetGainCounter: Int
  NetLossCounter: Int
  AccountBalance: Float!
  MovingAveMomentum: Float!
  TakeProfitPercentage: Float!
  StopLossPercentage: Float!
  ATRtollerance: Float
  FeesTotal: Float
  Tested: Boolean
  Owner: String!
  CreatedOn: Int!
}

type TradeOutcomeReport {
  _id: ID!
  Timestamp: Int!
  BotName: String!
  PercentageChange: Float!
  Balance: Float!
  Symbol: String!
  Outcome: String!
  Fee: Float
  ElapsedTime: Int!
  Volume: Float!
  FearGreedIndex: Int!
  MarketStatus: String!
}

input UpdateCountersInput {
  BotInstanceName: String!
  WINCounter: Boolean
  LOSSCounter: Boolean
  TIMEOUTGainCounter: Boolean
  TIMEOUTLossCounter: Boolean
  NetGainCounter: Boolean
  NetLossCounter: Boolean
  AccountBalance: Float!
  FeesTotal: Float
}
