"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """
  Deferred when true or undefined.
  """
  if: Boolean = true

  """
  Unique name
  """
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type ActivityReport {
  _id: ID!
  Timestamp: Int!
  Qty: Int!
  AvgGain: Float!
  TopAGain: Float
  TopBGain: Float
  TopCGain: Float
  FearGreedIndex: Int!
}

enum ContactMethod {
  EMAIL
  WHATSAPP
}

input CreateProjectInput {
  title: String!
  sop: Boolean = false
  description: String
  labels: [String]
  assignedTo: String
  dueDate: String
  status: String = "active"
}

input CreateTaskInput {
  title: String!
  description: String
  status: String = "inbox"
  labels: [String]
  assignedTo: String
  dueDate: String
  deferDate: String
  department: String
  projectId: String
  duration: Int
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  mobileNumber: String
  role: String!
  invitedBy: String
  preferredContactMethod: String
}

scalar DateTime

type HistoricKlineData {
  opentime: Int!
  coins: [OHLC!]!
}

type HistoricPrices {
  Pair: [Pair!]
  Timestamp: Int!
  CreatedAt: DateTime!
}

type HistoricTickerStats {
  Timestamp: Int!
  Stats: [TickerStats!]!
  CreatedAt: DateTime!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  token: String!
  user: User!
}

input MarkAsTestedInput {
  BotInstanceName: String!
  Tested: Boolean!
}

type Mean {
  Avg: Float!
  Count: Int!
}

input MeanInput {
  Avg: Float!
  Count: Int!
}

type Mutation {
  """
  Creates a new market Activity Report
  """
  createActivityReport(input: NewActivityReport): ActivityReport!

  """
  Creates a new Trade Outcome Report
  """
  createTradeOutcomeReport(input: NewTradeOutcomeReport): TradeOutcomeReport!

  """
  Deletes outcome reports for the matching given timestamp
  """
  deleteOutcomeReports(Timestamp: Int!): Boolean!

  """
  If the symbol exists, update it. If not, create it
  """
  upsertSymbolStats(input: UpsertSymbolStatsInput): SymbolStats!

  """
  Deletes Symbol Stats by Symbol
  """
  deleteSymbolStats(Symbol: String!): Boolean!

  """
  Creates a New strategy
  """
  createStrategy(input: StrategyInput!): Strategy

  """
  Updates the strategy you have provided the name for
  """
  updateStrategy(BotInstanceName: String!, input: StrategyInput!): Strategy

  """
  Deletes strategy for the given bot Name
  """
  deleteStrategy(BotInstanceName: String!): Boolean

  """
  Updates the outcome counters and account balance help on the strategy object
  """
  updateCounters(input: UpdateCountersInput!): Boolean

  """
  Set the Tested boolen value by bot Name
  """
  markAsTested(input: MarkAsTestedInput!): Boolean

  """
  Creates a new user
  """
  createUser(input: CreateUserInput!): User

  """
  Update an existing user
  """
  updateUser(input: UpdateUserInput!): User

  """
  Deletes a user by email
  """
  deleteUser(email: String!): Boolean
  login(input: LoginInput!): LoginResponse!

  """
  Creates an array of Historic Price pairs
  """
  createHistoricPrices(input: NewHistoricPriceInput): [HistoricPrices!]!

  """
  Creates an array of Historic Kline Data
  """
  createHistoricKline(input: NewHistoricKlineDataInput): [HistoricKlineData!]!

  """
  Deletes all prices data for the matching given timestamp
  """
  deleteHistoricPrices(Timestamp: Int!): Boolean!

  """
  Creates an array of 24h Ticker Stats at a given timestamp
  """
  createHistoricTickerStats(
    input: NewHistoricTickerStatsInput!
  ): [HistoricTickerStats!]!

  """
  Deletes all Ticker Stats at a specific timestamp
  """
  deleteHistoricTickerStats(Timestamp: Int!): Boolean!

  """
  Create a new task
  """
  createTask(input: CreateTaskInput!): Task

  """
  Update an existing task
  """
  updateTask(input: UpdateTaskInput!): Task

  """
  Delete a task by ID
  """
  deleteTask(id: ID!): Boolean

  """
  Create a new project
  """
  createProject(input: CreateProjectInput!): Project

  """
  Update an existing project
  """
  updateProject(input: UpdateProjectInput!): Project

  """
  Delete a project by ID
  """
  deleteProject(id: ID!): Boolean
}

input NewActivityReport {
  Timestamp: Int!
  Qty: Int!
  AvgGain: Float!
  TopAGain: Float
  TopBGain: Float
  TopCGain: Float
  FearGreedIndex: Int!
}

input NewHistoricKlineDataInput {
  Opentime: Int!
  Coins: [OHLCInput!]!
}

input NewHistoricPriceInput {
  Pairs: [PairInput!]!
  Timestamp: Int!
}

input NewHistoricTickerStatsInput {
  Timestamp: Int!
  Stats: [TickerStatsInput!]!
}

input NewTradeOutcomeReport {
  Timestamp: Int!
  BotName: String!
  PercentageChange: Float!
  Balance: Float!
  Symbol: String!
  Outcome: String!
  Fee: Float
  ElapsedTime: Int!
  Volume: Float!
  FearGreedIndex: Int!
  MarketStatus: String!
}

type OHLC {
  OpenPrice: String!
  HighPrice: String!
  LowPrice: String!
  ClosePrice: String!
  TradeVolume: String!
  Symbol: String!
}

input OHLCInput {
  OpenPrice: String!
  HighPrice: String!
  LowPrice: String!
  ClosePrice: String!
  TradeVolume: String!
  Symbol: String!
}

type Pair {
  Symbol: String!
  Price: String!
  PercentageChange: String
}

input PairInput {
  Symbol: String!
  Price: String!
  PercentageChange: String
}

type Project {
  id: ID!
  title: String!
  sop: Boolean!
  description: String
  labels: [String]
  assignedTo: String
  dueDate: String
  status: String!
  createdAt: String!
  updatedAt: String!
  tasks: [Task]
}

input ProjectFilterInput {
  sop: Boolean
}

type Query {
  """
  Get activity reports by ID
  """
  ActivityReport(_id: ID!): ActivityReport!

  """
  Get All activity reports
  """
  ActivityReports: [ActivityReport!]!

  """
  Get Trade Outcome reports by ID
  """
  TradeOutcomeReport(_id: ID!): TradeOutcomeReport!

  """
  Get Trade Outcome reports by Bot Name
  """
  TradeOutcomes(BotName: String!): [TradeOutcomeReport!]!

  """
  Get Trade Outcome reports by Bot Name & Market Status
  """
  TradeOutcomesInFocus(
    BotName: String!
    MarketStatus: String!
    limit: Int
  ): [TradeOutcomeReport!]!

  """
  Get All Trade Outcome reports
  """
  TradeOutcomeReports: [TradeOutcomeReport!]!

  """
  Get All Symbol Stats
  """
  SymbolStatsReports: [SymbolStats!]!

  """
  Get Symbol Stats by Symbol
  """
  SymbolStatsBySymbol(Symbol: String!): SymbolStats!

  """
  Get Stategy by Bot Name
  """
  getStrategyByName(BotInstanceName: String!): Strategy

  """
  Get all strategies
  """
  getAllStrategies: [Strategy]
  readUserByEmail(email: String!): User
  readAllUsers: [User!]!
  readUsersByRole(role: String!): [User!]!

  """
  Fetches price data for a given symbol up to a given limit of records
  """
  getHistoricPrice(symbol: String!, limit: Int): [HistoricPrices!]!

  """
  Gets all prices data at a given timestamp
  """
  getHistoricPricesAtTimestamp(Timestamp: Int!): [HistoricPrices!]!

  """
  Fetches kline data data for a given symbol up to a given limit of records
  """
  getHistoricKlineData(symbol: String!, limit: Int): [HistoricKlineData!]!

  """
  Returns a count of timestamps in the DB
  """
  getUniqueTimestampCount: Int!

  """
  This will give you a []string of all available trading symbols in your HistoricPrices collection.
  """
  availableSymbols: [String!]!

  """
  Gets all 24h Ticker Stats at a specific timestamp
  """
  getHistoricTickerStatsAtTimestamp(Timestamp: Int!): [HistoricTickerStats!]!

  """
  Fetches TickerStats history for a given symbol (e.g., to chart volatility or volume)
  """
  getTickerStatsBySymbol(symbol: String!, limit: Int): [TickerStats!]!

  """
  Returns a list of available symbols from TickerStats data
  """
  availableTickerSymbols: [String!]!

  """
  Returns a count of stored timestamps (like snapshots)
  """
  getTickerStatsSnapshotCount: Int!

  """
  Get a single task by ID
  """
  taskById(id: ID!): Task

  """
  Get all tasks
  """
  allTasks: [Task]

  """
  Get a single project by ID
  """
  projectById(id: ID!): Project

  """
  Get projects filtered by SOP standard operating proceedure
  """
  filterProjects(filter: ProjectFilterInput): [Project!]!
}

type Strategy {
  BotInstanceName: String!
  TradeDuration: Int!
  IncrementsATR: Int!
  LongSMADuration: Int!
  ShortSMADuration: Int!
  WINCounter: Int
  LOSSCounter: Int
  TIMEOUTGainCounter: Int
  TIMEOUTLossCounter: Int
  NetGainCounter: Int
  NetLossCounter: Int
  AccountBalance: Float!
  MovingAveMomentum: Float!
  TakeProfitPercentage: Float
  StopLossPercentage: Float
  ATRtollerance: Float
  FeesTotal: Float
  Tested: Boolean
  Owner: String
  CreatedOn: Int!
}

input StrategyInput {
  BotInstanceName: String!
  TradeDuration: Int!
  IncrementsATR: Int!
  LongSMADuration: Int!
  ShortSMADuration: Int!
  WINCounter: Int
  LOSSCounter: Int
  TIMEOUTGainCounter: Int
  TIMEOUTLossCounter: Int
  NetGainCounter: Int
  NetLossCounter: Int
  AccountBalance: Float!
  MovingAveMomentum: Float!
  TakeProfitPercentage: Float!
  StopLossPercentage: Float!
  ATRtollerance: Float
  FeesTotal: Float
  Tested: Boolean
  Owner: String!
  CreatedOn: Int!
}

type SymbolStats {
  Symbol: String!
  PositionCounts: [Mean!]!
  LiquidityEstimate: Mean
  MaxLiquidityEstimate: Float
  MinLiquidityEstimate: Float
}

type Task {
  id: ID!
  title: String!
  description: String
  status: String!
  labels: [String]
  assignedTo: String
  dueDate: String
  deferDate: String
  department: String
  projectId: String
  duration: Int
  createdAt: String!
  updatedAt: String!
}

type TickerStats {
  Symbol: String!
  PriceChange: String!
  PriceChangePct: String!
  QuoteVolume: String!
  Volume: String!
  TradeCount: Int!
  HighPrice: String!
  LowPrice: String!
  LastPrice: String!
  LiquidityEstimate: String
}

input TickerStatsInput {
  Symbol: String!
  PriceChange: String!
  PriceChangePct: String!
  QuoteVolume: String!
  Volume: String!
  TradeCount: Int!
  HighPrice: String!
  LowPrice: String!
  LastPrice: String!
  LiquidityEstimate: String
}

type TradeOutcomeReport {
  _id: ID!
  Timestamp: Int!
  BotName: String!
  PercentageChange: Float!
  Balance: Float!
  Symbol: String!
  Outcome: String!
  Fee: Float
  ElapsedTime: Int!
  Volume: Float!
  FearGreedIndex: Int!
  MarketStatus: String!
}

input UpdateCountersInput {
  BotInstanceName: String!
  WINCounter: Boolean
  LOSSCounter: Boolean
  TIMEOUTGainCounter: Boolean
  TIMEOUTLossCounter: Boolean
  NetGainCounter: Boolean
  NetLossCounter: Boolean
  AccountBalance: Float!
  FeesTotal: Float
}

input UpdateProjectInput {
  id: ID!
  title: String
  sop: Boolean
  description: String
  labels: [String]
  assignedTo: String
  dueDate: String
  status: String
}

input UpdateTaskInput {
  id: ID!
  title: String
  description: String
  status: String
  labels: [String]
  assignedTo: String
  dueDate: String
  deferDate: String
  department: String
  projectId: String
  duration: Int
}

input UpdateUserInput {
  id: ID!
  firstName: String
  lastName: String
  email: String
  password: String
  mobileNumber: String
  verifiedEmail: Boolean
  verifiedMobile: Boolean
  role: String
  isDeleted: Boolean!
  openToTrade: Boolean
  binanceAPI: String
  preferredContactMethod: String
  notes: String
  invitedBy: String
  joinedBallot: Boolean
  isPaidMember: Boolean
}

input UpsertSymbolStatsInput {
  Symbol: String!
  PositionCounts: [MeanInput]
  LiquidityEstimate: MeanInput
  MaxLiquidityEstimate: Float
  MinLiquidityEstimate: Float
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  mobileNumber: String
  verifiedEmail: Boolean!
  verifiedMobile: Boolean!
  role: String!
  isDeleted: Boolean!
  openToTrade: Boolean!
  binanceAPI: String
  preferredContactMethod: String
  notes: String
  invitedBy: String
  joinedBallot: Boolean!
  isPaidMember: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum UserRole {
  GUEST
  INTERESTED
  MEMBER
  ADMIN
}
