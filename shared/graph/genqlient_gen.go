// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package graph

import (
	"context"

	"cryptobotmanager.com/cbm-backend/shared/model"
	"github.com/Khan/genqlient/graphql"
)

// CreateActivityReportCreateActivityReport includes the requested fields of the GraphQL type ActivityReport.
type CreateActivityReportCreateActivityReport struct {
	Id             string  `json:"_id"`
	Timestamp      int     `json:"Timestamp"`
	Qty            int     `json:"Qty"`
	AvgGain        float64 `json:"AvgGain"`
	TopAGain       float64 `json:"TopAGain"`
	TopBGain       float64 `json:"TopBGain"`
	TopCGain       float64 `json:"TopCGain"`
	FearGreedIndex int     `json:"FearGreedIndex"`
}

// GetId returns CreateActivityReportCreateActivityReport.Id, and is useful for accessing the field via an interface.
func (v *CreateActivityReportCreateActivityReport) GetId() string { return v.Id }

// GetTimestamp returns CreateActivityReportCreateActivityReport.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateActivityReportCreateActivityReport) GetTimestamp() int { return v.Timestamp }

// GetQty returns CreateActivityReportCreateActivityReport.Qty, and is useful for accessing the field via an interface.
func (v *CreateActivityReportCreateActivityReport) GetQty() int { return v.Qty }

// GetAvgGain returns CreateActivityReportCreateActivityReport.AvgGain, and is useful for accessing the field via an interface.
func (v *CreateActivityReportCreateActivityReport) GetAvgGain() float64 { return v.AvgGain }

// GetTopAGain returns CreateActivityReportCreateActivityReport.TopAGain, and is useful for accessing the field via an interface.
func (v *CreateActivityReportCreateActivityReport) GetTopAGain() float64 { return v.TopAGain }

// GetTopBGain returns CreateActivityReportCreateActivityReport.TopBGain, and is useful for accessing the field via an interface.
func (v *CreateActivityReportCreateActivityReport) GetTopBGain() float64 { return v.TopBGain }

// GetTopCGain returns CreateActivityReportCreateActivityReport.TopCGain, and is useful for accessing the field via an interface.
func (v *CreateActivityReportCreateActivityReport) GetTopCGain() float64 { return v.TopCGain }

// GetFearGreedIndex returns CreateActivityReportCreateActivityReport.FearGreedIndex, and is useful for accessing the field via an interface.
func (v *CreateActivityReportCreateActivityReport) GetFearGreedIndex() int { return v.FearGreedIndex }

// CreateActivityReportResponse is returned by CreateActivityReport on success.
type CreateActivityReportResponse struct {
	// Creates a new market Activity Report
	CreateActivityReport CreateActivityReportCreateActivityReport `json:"createActivityReport"`
}

// GetCreateActivityReport returns CreateActivityReportResponse.CreateActivityReport, and is useful for accessing the field via an interface.
func (v *CreateActivityReportResponse) GetCreateActivityReport() CreateActivityReportCreateActivityReport {
	return v.CreateActivityReport
}

// CreateHistoricPricesCreateHistoricPrices includes the requested fields of the GraphQL type HistoricPrices.
type CreateHistoricPricesCreateHistoricPrices struct {
	Pair []CreateHistoricPricesCreateHistoricPricesPair `json:"Pair"`
}

// GetPair returns CreateHistoricPricesCreateHistoricPrices.Pair, and is useful for accessing the field via an interface.
func (v *CreateHistoricPricesCreateHistoricPrices) GetPair() []CreateHistoricPricesCreateHistoricPricesPair {
	return v.Pair
}

// CreateHistoricPricesCreateHistoricPricesPair includes the requested fields of the GraphQL type Pair.
type CreateHistoricPricesCreateHistoricPricesPair struct {
	Symbol string `json:"Symbol"`
	Price  string `json:"Price"`
}

// GetSymbol returns CreateHistoricPricesCreateHistoricPricesPair.Symbol, and is useful for accessing the field via an interface.
func (v *CreateHistoricPricesCreateHistoricPricesPair) GetSymbol() string { return v.Symbol }

// GetPrice returns CreateHistoricPricesCreateHistoricPricesPair.Price, and is useful for accessing the field via an interface.
func (v *CreateHistoricPricesCreateHistoricPricesPair) GetPrice() string { return v.Price }

// CreateHistoricPricesResponse is returned by CreateHistoricPrices on success.
type CreateHistoricPricesResponse struct {
	// Creates an array of Historic Price pairs
	CreateHistoricPrices []CreateHistoricPricesCreateHistoricPrices `json:"createHistoricPrices"`
}

// GetCreateHistoricPrices returns CreateHistoricPricesResponse.CreateHistoricPrices, and is useful for accessing the field via an interface.
func (v *CreateHistoricPricesResponse) GetCreateHistoricPrices() []CreateHistoricPricesCreateHistoricPrices {
	return v.CreateHistoricPrices
}

// CreateHistoricTickerStatsCreateHistoricTickerStats includes the requested fields of the GraphQL type HistoricTickerStats.
type CreateHistoricTickerStatsCreateHistoricTickerStats struct {
	Timestamp int                                                                  `json:"Timestamp"`
	Stats     []CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats `json:"Stats"`
	CreatedAt string                                                               `json:"CreatedAt"`
}

// GetTimestamp returns CreateHistoricTickerStatsCreateHistoricTickerStats.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsCreateHistoricTickerStats) GetTimestamp() int { return v.Timestamp }

// GetStats returns CreateHistoricTickerStatsCreateHistoricTickerStats.Stats, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsCreateHistoricTickerStats) GetStats() []CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats {
	return v.Stats
}

// GetCreatedAt returns CreateHistoricTickerStatsCreateHistoricTickerStats.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsCreateHistoricTickerStats) GetCreatedAt() string {
	return v.CreatedAt
}

// CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats includes the requested fields of the GraphQL type TickerStats.
type CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats struct {
	Symbol            string `json:"Symbol"`
	PriceChange       string `json:"PriceChange"`
	PriceChangePct    string `json:"PriceChangePct"`
	QuoteVolume       string `json:"QuoteVolume"`
	Volume            string `json:"Volume"`
	TradeCount        int    `json:"TradeCount"`
	HighPrice         string `json:"HighPrice"`
	LowPrice          string `json:"LowPrice"`
	LastPrice         string `json:"LastPrice"`
	LiquidityEstimate string `json:"LiquidityEstimate"`
}

// GetSymbol returns CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats.Symbol, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats) GetSymbol() string {
	return v.Symbol
}

// GetPriceChange returns CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats.PriceChange, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats) GetPriceChange() string {
	return v.PriceChange
}

// GetPriceChangePct returns CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats.PriceChangePct, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats) GetPriceChangePct() string {
	return v.PriceChangePct
}

// GetQuoteVolume returns CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats.QuoteVolume, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats) GetQuoteVolume() string {
	return v.QuoteVolume
}

// GetVolume returns CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats.Volume, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats) GetVolume() string {
	return v.Volume
}

// GetTradeCount returns CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats.TradeCount, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats) GetTradeCount() int {
	return v.TradeCount
}

// GetHighPrice returns CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats.HighPrice, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats) GetHighPrice() string {
	return v.HighPrice
}

// GetLowPrice returns CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats.LowPrice, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats) GetLowPrice() string {
	return v.LowPrice
}

// GetLastPrice returns CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats.LastPrice, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats) GetLastPrice() string {
	return v.LastPrice
}

// GetLiquidityEstimate returns CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats.LiquidityEstimate, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsCreateHistoricTickerStatsStatsTickerStats) GetLiquidityEstimate() string {
	return v.LiquidityEstimate
}

// CreateHistoricTickerStatsResponse is returned by CreateHistoricTickerStats on success.
type CreateHistoricTickerStatsResponse struct {
	// Creates an array of 24h Ticker Stats at a given timestamp
	CreateHistoricTickerStats []CreateHistoricTickerStatsCreateHistoricTickerStats `json:"createHistoricTickerStats"`
}

// GetCreateHistoricTickerStats returns CreateHistoricTickerStatsResponse.CreateHistoricTickerStats, and is useful for accessing the field via an interface.
func (v *CreateHistoricTickerStatsResponse) GetCreateHistoricTickerStats() []CreateHistoricTickerStatsCreateHistoricTickerStats {
	return v.CreateHistoricTickerStats
}

// CreateProjectCreateProject includes the requested fields of the GraphQL type Project.
type CreateProjectCreateProject struct {
	Id          string   `json:"id"`
	Title       string   `json:"title"`
	Sop         bool     `json:"sop"`
	Description string   `json:"description"`
	Labels      []string `json:"labels"`
	AssignedTo  string   `json:"assignedTo"`
	DueDate     string   `json:"dueDate"`
	Status      string   `json:"status"`
	CreatedAt   string   `json:"createdAt"`
	UpdatedAt   string   `json:"updatedAt"`
}

// GetId returns CreateProjectCreateProject.Id, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProject) GetId() string { return v.Id }

// GetTitle returns CreateProjectCreateProject.Title, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProject) GetTitle() string { return v.Title }

// GetSop returns CreateProjectCreateProject.Sop, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProject) GetSop() bool { return v.Sop }

// GetDescription returns CreateProjectCreateProject.Description, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProject) GetDescription() string { return v.Description }

// GetLabels returns CreateProjectCreateProject.Labels, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProject) GetLabels() []string { return v.Labels }

// GetAssignedTo returns CreateProjectCreateProject.AssignedTo, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProject) GetAssignedTo() string { return v.AssignedTo }

// GetDueDate returns CreateProjectCreateProject.DueDate, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProject) GetDueDate() string { return v.DueDate }

// GetStatus returns CreateProjectCreateProject.Status, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProject) GetStatus() string { return v.Status }

// GetCreatedAt returns CreateProjectCreateProject.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProject) GetCreatedAt() string { return v.CreatedAt }

// GetUpdatedAt returns CreateProjectCreateProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CreateProjectCreateProject) GetUpdatedAt() string { return v.UpdatedAt }

type CreateProjectInput struct {
	Title       string   `json:"title"`
	Sop         bool     `json:"sop"`
	Description string   `json:"description"`
	Labels      []string `json:"labels"`
	AssignedTo  string   `json:"assignedTo"`
	DueDate     string   `json:"dueDate"`
	Status      string   `json:"status"`
}

// GetTitle returns CreateProjectInput.Title, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetTitle() string { return v.Title }

// GetSop returns CreateProjectInput.Sop, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetSop() bool { return v.Sop }

// GetDescription returns CreateProjectInput.Description, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetDescription() string { return v.Description }

// GetLabels returns CreateProjectInput.Labels, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetLabels() []string { return v.Labels }

// GetAssignedTo returns CreateProjectInput.AssignedTo, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetAssignedTo() string { return v.AssignedTo }

// GetDueDate returns CreateProjectInput.DueDate, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetDueDate() string { return v.DueDate }

// GetStatus returns CreateProjectInput.Status, and is useful for accessing the field via an interface.
func (v *CreateProjectInput) GetStatus() string { return v.Status }

// CreateProjectResponse is returned by CreateProject on success.
type CreateProjectResponse struct {
	// Create a new project
	CreateProject CreateProjectCreateProject `json:"createProject"`
}

// GetCreateProject returns CreateProjectResponse.CreateProject, and is useful for accessing the field via an interface.
func (v *CreateProjectResponse) GetCreateProject() CreateProjectCreateProject { return v.CreateProject }

// CreateTaskCreateTask includes the requested fields of the GraphQL type Task.
type CreateTaskCreateTask struct {
	Id          string   `json:"id"`
	Title       string   `json:"title"`
	Description string   `json:"description"`
	Status      string   `json:"status"`
	Labels      []string `json:"labels"`
	AssignedTo  string   `json:"assignedTo"`
	DueDate     string   `json:"dueDate"`
	DeferDate   string   `json:"deferDate"`
	Department  string   `json:"department"`
	ProjectId   string   `json:"projectId"`
	Duration    int      `json:"duration"`
	CreatedAt   string   `json:"createdAt"`
	UpdatedAt   string   `json:"updatedAt"`
}

// GetId returns CreateTaskCreateTask.Id, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetId() string { return v.Id }

// GetTitle returns CreateTaskCreateTask.Title, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetTitle() string { return v.Title }

// GetDescription returns CreateTaskCreateTask.Description, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetDescription() string { return v.Description }

// GetStatus returns CreateTaskCreateTask.Status, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetStatus() string { return v.Status }

// GetLabels returns CreateTaskCreateTask.Labels, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetLabels() []string { return v.Labels }

// GetAssignedTo returns CreateTaskCreateTask.AssignedTo, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetAssignedTo() string { return v.AssignedTo }

// GetDueDate returns CreateTaskCreateTask.DueDate, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetDueDate() string { return v.DueDate }

// GetDeferDate returns CreateTaskCreateTask.DeferDate, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetDeferDate() string { return v.DeferDate }

// GetDepartment returns CreateTaskCreateTask.Department, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetDepartment() string { return v.Department }

// GetProjectId returns CreateTaskCreateTask.ProjectId, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetProjectId() string { return v.ProjectId }

// GetDuration returns CreateTaskCreateTask.Duration, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetDuration() int { return v.Duration }

// GetCreatedAt returns CreateTaskCreateTask.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetCreatedAt() string { return v.CreatedAt }

// GetUpdatedAt returns CreateTaskCreateTask.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CreateTaskCreateTask) GetUpdatedAt() string { return v.UpdatedAt }

type CreateTaskInput struct {
	Title       string   `json:"title"`
	Description string   `json:"description"`
	Status      string   `json:"status"`
	Labels      []string `json:"labels"`
	AssignedTo  string   `json:"assignedTo"`
	DueDate     string   `json:"dueDate"`
	DeferDate   string   `json:"deferDate"`
	Department  string   `json:"department"`
	ProjectId   string   `json:"projectId"`
	Duration    int      `json:"duration"`
}

// GetTitle returns CreateTaskInput.Title, and is useful for accessing the field via an interface.
func (v *CreateTaskInput) GetTitle() string { return v.Title }

// GetDescription returns CreateTaskInput.Description, and is useful for accessing the field via an interface.
func (v *CreateTaskInput) GetDescription() string { return v.Description }

// GetStatus returns CreateTaskInput.Status, and is useful for accessing the field via an interface.
func (v *CreateTaskInput) GetStatus() string { return v.Status }

// GetLabels returns CreateTaskInput.Labels, and is useful for accessing the field via an interface.
func (v *CreateTaskInput) GetLabels() []string { return v.Labels }

// GetAssignedTo returns CreateTaskInput.AssignedTo, and is useful for accessing the field via an interface.
func (v *CreateTaskInput) GetAssignedTo() string { return v.AssignedTo }

// GetDueDate returns CreateTaskInput.DueDate, and is useful for accessing the field via an interface.
func (v *CreateTaskInput) GetDueDate() string { return v.DueDate }

// GetDeferDate returns CreateTaskInput.DeferDate, and is useful for accessing the field via an interface.
func (v *CreateTaskInput) GetDeferDate() string { return v.DeferDate }

// GetDepartment returns CreateTaskInput.Department, and is useful for accessing the field via an interface.
func (v *CreateTaskInput) GetDepartment() string { return v.Department }

// GetProjectId returns CreateTaskInput.ProjectId, and is useful for accessing the field via an interface.
func (v *CreateTaskInput) GetProjectId() string { return v.ProjectId }

// GetDuration returns CreateTaskInput.Duration, and is useful for accessing the field via an interface.
func (v *CreateTaskInput) GetDuration() int { return v.Duration }

// CreateTaskResponse is returned by CreateTask on success.
type CreateTaskResponse struct {
	// Create a new task
	CreateTask CreateTaskCreateTask `json:"createTask"`
}

// GetCreateTask returns CreateTaskResponse.CreateTask, and is useful for accessing the field via an interface.
func (v *CreateTaskResponse) GetCreateTask() CreateTaskCreateTask { return v.CreateTask }

// CreateTradeOutcomeReportCreateTradeOutcomeReport includes the requested fields of the GraphQL type TradeOutcomeReport.
type CreateTradeOutcomeReportCreateTradeOutcomeReport struct {
	Id               string  `json:"_id"`
	Timestamp        int     `json:"Timestamp"`
	BotName          string  `json:"BotName"`
	PercentageChange float64 `json:"PercentageChange"`
	Balance          float64 `json:"Balance"`
	Symbol           string  `json:"Symbol"`
	Outcome          string  `json:"Outcome"`
	Fee              float64 `json:"Fee"`
	ElapsedTime      int     `json:"ElapsedTime"`
	Volume           float64 `json:"Volume"`
	FearGreedIndex   int     `json:"FearGreedIndex"`
	MarketStatus     string  `json:"MarketStatus"`
}

// GetId returns CreateTradeOutcomeReportCreateTradeOutcomeReport.Id, and is useful for accessing the field via an interface.
func (v *CreateTradeOutcomeReportCreateTradeOutcomeReport) GetId() string { return v.Id }

// GetTimestamp returns CreateTradeOutcomeReportCreateTradeOutcomeReport.Timestamp, and is useful for accessing the field via an interface.
func (v *CreateTradeOutcomeReportCreateTradeOutcomeReport) GetTimestamp() int { return v.Timestamp }

// GetBotName returns CreateTradeOutcomeReportCreateTradeOutcomeReport.BotName, and is useful for accessing the field via an interface.
func (v *CreateTradeOutcomeReportCreateTradeOutcomeReport) GetBotName() string { return v.BotName }

// GetPercentageChange returns CreateTradeOutcomeReportCreateTradeOutcomeReport.PercentageChange, and is useful for accessing the field via an interface.
func (v *CreateTradeOutcomeReportCreateTradeOutcomeReport) GetPercentageChange() float64 {
	return v.PercentageChange
}

// GetBalance returns CreateTradeOutcomeReportCreateTradeOutcomeReport.Balance, and is useful for accessing the field via an interface.
func (v *CreateTradeOutcomeReportCreateTradeOutcomeReport) GetBalance() float64 { return v.Balance }

// GetSymbol returns CreateTradeOutcomeReportCreateTradeOutcomeReport.Symbol, and is useful for accessing the field via an interface.
func (v *CreateTradeOutcomeReportCreateTradeOutcomeReport) GetSymbol() string { return v.Symbol }

// GetOutcome returns CreateTradeOutcomeReportCreateTradeOutcomeReport.Outcome, and is useful for accessing the field via an interface.
func (v *CreateTradeOutcomeReportCreateTradeOutcomeReport) GetOutcome() string { return v.Outcome }

// GetFee returns CreateTradeOutcomeReportCreateTradeOutcomeReport.Fee, and is useful for accessing the field via an interface.
func (v *CreateTradeOutcomeReportCreateTradeOutcomeReport) GetFee() float64 { return v.Fee }

// GetElapsedTime returns CreateTradeOutcomeReportCreateTradeOutcomeReport.ElapsedTime, and is useful for accessing the field via an interface.
func (v *CreateTradeOutcomeReportCreateTradeOutcomeReport) GetElapsedTime() int { return v.ElapsedTime }

// GetVolume returns CreateTradeOutcomeReportCreateTradeOutcomeReport.Volume, and is useful for accessing the field via an interface.
func (v *CreateTradeOutcomeReportCreateTradeOutcomeReport) GetVolume() float64 { return v.Volume }

// GetFearGreedIndex returns CreateTradeOutcomeReportCreateTradeOutcomeReport.FearGreedIndex, and is useful for accessing the field via an interface.
func (v *CreateTradeOutcomeReportCreateTradeOutcomeReport) GetFearGreedIndex() int {
	return v.FearGreedIndex
}

// GetMarketStatus returns CreateTradeOutcomeReportCreateTradeOutcomeReport.MarketStatus, and is useful for accessing the field via an interface.
func (v *CreateTradeOutcomeReportCreateTradeOutcomeReport) GetMarketStatus() string {
	return v.MarketStatus
}

// CreateTradeOutcomeReportResponse is returned by CreateTradeOutcomeReport on success.
type CreateTradeOutcomeReportResponse struct {
	// Creates a new Trade Outcome Report
	CreateTradeOutcomeReport CreateTradeOutcomeReportCreateTradeOutcomeReport `json:"createTradeOutcomeReport"`
}

// GetCreateTradeOutcomeReport returns CreateTradeOutcomeReportResponse.CreateTradeOutcomeReport, and is useful for accessing the field via an interface.
func (v *CreateTradeOutcomeReportResponse) GetCreateTradeOutcomeReport() CreateTradeOutcomeReportCreateTradeOutcomeReport {
	return v.CreateTradeOutcomeReport
}

// CreateUserCreateUser includes the requested fields of the GraphQL type User.
type CreateUserCreateUser struct {
	Id        string `json:"id"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Role      string `json:"role"`
}

// GetId returns CreateUserCreateUser.Id, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetId() string { return v.Id }

// GetFirstName returns CreateUserCreateUser.FirstName, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetFirstName() string { return v.FirstName }

// GetLastName returns CreateUserCreateUser.LastName, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetLastName() string { return v.LastName }

// GetEmail returns CreateUserCreateUser.Email, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetEmail() string { return v.Email }

// GetRole returns CreateUserCreateUser.Role, and is useful for accessing the field via an interface.
func (v *CreateUserCreateUser) GetRole() string { return v.Role }

type CreateUserInput struct {
	FirstName              string `json:"firstName"`
	LastName               string `json:"lastName"`
	Email                  string `json:"email"`
	Password               string `json:"password"`
	MobileNumber           string `json:"mobileNumber"`
	Role                   string `json:"role"`
	InvitedBy              string `json:"invitedBy"`
	PreferredContactMethod string `json:"preferredContactMethod"`
}

// GetFirstName returns CreateUserInput.FirstName, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetFirstName() string { return v.FirstName }

// GetLastName returns CreateUserInput.LastName, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetLastName() string { return v.LastName }

// GetEmail returns CreateUserInput.Email, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetEmail() string { return v.Email }

// GetPassword returns CreateUserInput.Password, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetPassword() string { return v.Password }

// GetMobileNumber returns CreateUserInput.MobileNumber, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetMobileNumber() string { return v.MobileNumber }

// GetRole returns CreateUserInput.Role, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetRole() string { return v.Role }

// GetInvitedBy returns CreateUserInput.InvitedBy, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetInvitedBy() string { return v.InvitedBy }

// GetPreferredContactMethod returns CreateUserInput.PreferredContactMethod, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetPreferredContactMethod() string { return v.PreferredContactMethod }

// CreateUserResponse is returned by CreateUser on success.
type CreateUserResponse struct {
	// Creates a new user
	CreateUser CreateUserCreateUser `json:"createUser"`
}

// GetCreateUser returns CreateUserResponse.CreateUser, and is useful for accessing the field via an interface.
func (v *CreateUserResponse) GetCreateUser() CreateUserCreateUser { return v.CreateUser }

type NewHistoricPriceInput struct {
	Pairs     []PairInput `json:"Pairs"`
	Timestamp int         `json:"Timestamp"`
}

// GetPairs returns NewHistoricPriceInput.Pairs, and is useful for accessing the field via an interface.
func (v *NewHistoricPriceInput) GetPairs() []PairInput { return v.Pairs }

// GetTimestamp returns NewHistoricPriceInput.Timestamp, and is useful for accessing the field via an interface.
func (v *NewHistoricPriceInput) GetTimestamp() int { return v.Timestamp }

type NewHistoricTickerStatsInput struct {
	Timestamp int                `json:"Timestamp"`
	Stats     []TickerStatsInput `json:"Stats"`
}

// GetTimestamp returns NewHistoricTickerStatsInput.Timestamp, and is useful for accessing the field via an interface.
func (v *NewHistoricTickerStatsInput) GetTimestamp() int { return v.Timestamp }

// GetStats returns NewHistoricTickerStatsInput.Stats, and is useful for accessing the field via an interface.
func (v *NewHistoricTickerStatsInput) GetStats() []TickerStatsInput { return v.Stats }

type PairInput struct {
	Symbol           string `json:"Symbol"`
	Price            string `json:"Price"`
	PercentageChange string `json:"PercentageChange"`
}

// GetSymbol returns PairInput.Symbol, and is useful for accessing the field via an interface.
func (v *PairInput) GetSymbol() string { return v.Symbol }

// GetPrice returns PairInput.Price, and is useful for accessing the field via an interface.
func (v *PairInput) GetPrice() string { return v.Price }

// GetPercentageChange returns PairInput.PercentageChange, and is useful for accessing the field via an interface.
func (v *PairInput) GetPercentageChange() string { return v.PercentageChange }

// ReadAllStrategiesReadAllStrategiesStrategy includes the requested fields of the GraphQL type Strategy.
type ReadAllStrategiesReadAllStrategiesStrategy struct {
	BotInstanceName      string  `json:"BotInstanceName"`
	TradeDuration        int     `json:"TradeDuration"`
	IncrementsATR        int     `json:"IncrementsATR"`
	LongSMADuration      int     `json:"LongSMADuration"`
	ShortSMADuration     int     `json:"ShortSMADuration"`
	WINCounter           int     `json:"WINCounter"`
	LOSSCounter          int     `json:"LOSSCounter"`
	TIMEOUTGainCounter   int     `json:"TIMEOUTGainCounter"`
	TIMEOUTLossCounter   int     `json:"TIMEOUTLossCounter"`
	NetGainCounter       int     `json:"NetGainCounter"`
	NetLossCounter       int     `json:"NetLossCounter"`
	AccountBalance       float64 `json:"AccountBalance"`
	MovingAveMomentum    float64 `json:"MovingAveMomentum"`
	TakeProfitPercentage float64 `json:"TakeProfitPercentage"`
	StopLossPercentage   float64 `json:"StopLossPercentage"`
	ATRtollerance        float64 `json:"ATRtollerance"`
	FeesTotal            float64 `json:"FeesTotal"`
	Tested               bool    `json:"Tested"`
	Owner                string  `json:"Owner"`
	CreatedOn            int     `json:"CreatedOn"`
}

// GetBotInstanceName returns ReadAllStrategiesReadAllStrategiesStrategy.BotInstanceName, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetBotInstanceName() string {
	return v.BotInstanceName
}

// GetTradeDuration returns ReadAllStrategiesReadAllStrategiesStrategy.TradeDuration, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetTradeDuration() int { return v.TradeDuration }

// GetIncrementsATR returns ReadAllStrategiesReadAllStrategiesStrategy.IncrementsATR, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetIncrementsATR() int { return v.IncrementsATR }

// GetLongSMADuration returns ReadAllStrategiesReadAllStrategiesStrategy.LongSMADuration, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetLongSMADuration() int {
	return v.LongSMADuration
}

// GetShortSMADuration returns ReadAllStrategiesReadAllStrategiesStrategy.ShortSMADuration, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetShortSMADuration() int {
	return v.ShortSMADuration
}

// GetWINCounter returns ReadAllStrategiesReadAllStrategiesStrategy.WINCounter, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetWINCounter() int { return v.WINCounter }

// GetLOSSCounter returns ReadAllStrategiesReadAllStrategiesStrategy.LOSSCounter, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetLOSSCounter() int { return v.LOSSCounter }

// GetTIMEOUTGainCounter returns ReadAllStrategiesReadAllStrategiesStrategy.TIMEOUTGainCounter, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetTIMEOUTGainCounter() int {
	return v.TIMEOUTGainCounter
}

// GetTIMEOUTLossCounter returns ReadAllStrategiesReadAllStrategiesStrategy.TIMEOUTLossCounter, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetTIMEOUTLossCounter() int {
	return v.TIMEOUTLossCounter
}

// GetNetGainCounter returns ReadAllStrategiesReadAllStrategiesStrategy.NetGainCounter, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetNetGainCounter() int { return v.NetGainCounter }

// GetNetLossCounter returns ReadAllStrategiesReadAllStrategiesStrategy.NetLossCounter, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetNetLossCounter() int { return v.NetLossCounter }

// GetAccountBalance returns ReadAllStrategiesReadAllStrategiesStrategy.AccountBalance, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetAccountBalance() float64 {
	return v.AccountBalance
}

// GetMovingAveMomentum returns ReadAllStrategiesReadAllStrategiesStrategy.MovingAveMomentum, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetMovingAveMomentum() float64 {
	return v.MovingAveMomentum
}

// GetTakeProfitPercentage returns ReadAllStrategiesReadAllStrategiesStrategy.TakeProfitPercentage, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetTakeProfitPercentage() float64 {
	return v.TakeProfitPercentage
}

// GetStopLossPercentage returns ReadAllStrategiesReadAllStrategiesStrategy.StopLossPercentage, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetStopLossPercentage() float64 {
	return v.StopLossPercentage
}

// GetATRtollerance returns ReadAllStrategiesReadAllStrategiesStrategy.ATRtollerance, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetATRtollerance() float64 {
	return v.ATRtollerance
}

// GetFeesTotal returns ReadAllStrategiesReadAllStrategiesStrategy.FeesTotal, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetFeesTotal() float64 { return v.FeesTotal }

// GetTested returns ReadAllStrategiesReadAllStrategiesStrategy.Tested, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetTested() bool { return v.Tested }

// GetOwner returns ReadAllStrategiesReadAllStrategiesStrategy.Owner, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetOwner() string { return v.Owner }

// GetCreatedOn returns ReadAllStrategiesReadAllStrategiesStrategy.CreatedOn, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesReadAllStrategiesStrategy) GetCreatedOn() int { return v.CreatedOn }

// ReadAllStrategiesResponse is returned by ReadAllStrategies on success.
type ReadAllStrategiesResponse struct {
	// Get all strategies
	ReadAllStrategies []ReadAllStrategiesReadAllStrategiesStrategy `json:"readAllStrategies"`
}

// GetReadAllStrategies returns ReadAllStrategiesResponse.ReadAllStrategies, and is useful for accessing the field via an interface.
func (v *ReadAllStrategiesResponse) GetReadAllStrategies() []ReadAllStrategiesReadAllStrategiesStrategy {
	return v.ReadAllStrategies
}

// ReadAllTasksReadAllTasksTask includes the requested fields of the GraphQL type Task.
type ReadAllTasksReadAllTasksTask struct {
	Id          string   `json:"id"`
	Title       string   `json:"title"`
	Description string   `json:"description"`
	Status      string   `json:"status"`
	Labels      []string `json:"labels"`
	AssignedTo  string   `json:"assignedTo"`
	DueDate     string   `json:"dueDate"`
	DeferDate   string   `json:"deferDate"`
	Department  string   `json:"department"`
	ProjectId   string   `json:"projectId"`
	Duration    int      `json:"duration"`
	CreatedAt   string   `json:"createdAt"`
	UpdatedAt   string   `json:"updatedAt"`
}

// GetId returns ReadAllTasksReadAllTasksTask.Id, and is useful for accessing the field via an interface.
func (v *ReadAllTasksReadAllTasksTask) GetId() string { return v.Id }

// GetTitle returns ReadAllTasksReadAllTasksTask.Title, and is useful for accessing the field via an interface.
func (v *ReadAllTasksReadAllTasksTask) GetTitle() string { return v.Title }

// GetDescription returns ReadAllTasksReadAllTasksTask.Description, and is useful for accessing the field via an interface.
func (v *ReadAllTasksReadAllTasksTask) GetDescription() string { return v.Description }

// GetStatus returns ReadAllTasksReadAllTasksTask.Status, and is useful for accessing the field via an interface.
func (v *ReadAllTasksReadAllTasksTask) GetStatus() string { return v.Status }

// GetLabels returns ReadAllTasksReadAllTasksTask.Labels, and is useful for accessing the field via an interface.
func (v *ReadAllTasksReadAllTasksTask) GetLabels() []string { return v.Labels }

// GetAssignedTo returns ReadAllTasksReadAllTasksTask.AssignedTo, and is useful for accessing the field via an interface.
func (v *ReadAllTasksReadAllTasksTask) GetAssignedTo() string { return v.AssignedTo }

// GetDueDate returns ReadAllTasksReadAllTasksTask.DueDate, and is useful for accessing the field via an interface.
func (v *ReadAllTasksReadAllTasksTask) GetDueDate() string { return v.DueDate }

// GetDeferDate returns ReadAllTasksReadAllTasksTask.DeferDate, and is useful for accessing the field via an interface.
func (v *ReadAllTasksReadAllTasksTask) GetDeferDate() string { return v.DeferDate }

// GetDepartment returns ReadAllTasksReadAllTasksTask.Department, and is useful for accessing the field via an interface.
func (v *ReadAllTasksReadAllTasksTask) GetDepartment() string { return v.Department }

// GetProjectId returns ReadAllTasksReadAllTasksTask.ProjectId, and is useful for accessing the field via an interface.
func (v *ReadAllTasksReadAllTasksTask) GetProjectId() string { return v.ProjectId }

// GetDuration returns ReadAllTasksReadAllTasksTask.Duration, and is useful for accessing the field via an interface.
func (v *ReadAllTasksReadAllTasksTask) GetDuration() int { return v.Duration }

// GetCreatedAt returns ReadAllTasksReadAllTasksTask.CreatedAt, and is useful for accessing the field via an interface.
func (v *ReadAllTasksReadAllTasksTask) GetCreatedAt() string { return v.CreatedAt }

// GetUpdatedAt returns ReadAllTasksReadAllTasksTask.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ReadAllTasksReadAllTasksTask) GetUpdatedAt() string { return v.UpdatedAt }

// ReadAllTasksResponse is returned by ReadAllTasks on success.
type ReadAllTasksResponse struct {
	// Get all tasks
	ReadAllTasks []ReadAllTasksReadAllTasksTask `json:"readAllTasks"`
}

// GetReadAllTasks returns ReadAllTasksResponse.ReadAllTasks, and is useful for accessing the field via an interface.
func (v *ReadAllTasksResponse) GetReadAllTasks() []ReadAllTasksReadAllTasksTask {
	return v.ReadAllTasks
}

// ReadHistoricPriceReadHistoricPriceHistoricPrices includes the requested fields of the GraphQL type HistoricPrices.
type ReadHistoricPriceReadHistoricPriceHistoricPrices struct {
	Pair      []ReadHistoricPriceReadHistoricPriceHistoricPricesPair `json:"Pair"`
	Timestamp int                                                    `json:"Timestamp"`
}

// GetPair returns ReadHistoricPriceReadHistoricPriceHistoricPrices.Pair, and is useful for accessing the field via an interface.
func (v *ReadHistoricPriceReadHistoricPriceHistoricPrices) GetPair() []ReadHistoricPriceReadHistoricPriceHistoricPricesPair {
	return v.Pair
}

// GetTimestamp returns ReadHistoricPriceReadHistoricPriceHistoricPrices.Timestamp, and is useful for accessing the field via an interface.
func (v *ReadHistoricPriceReadHistoricPriceHistoricPrices) GetTimestamp() int { return v.Timestamp }

// ReadHistoricPriceReadHistoricPriceHistoricPricesPair includes the requested fields of the GraphQL type Pair.
type ReadHistoricPriceReadHistoricPriceHistoricPricesPair struct {
	Symbol string `json:"Symbol"`
	Price  string `json:"Price"`
}

// GetSymbol returns ReadHistoricPriceReadHistoricPriceHistoricPricesPair.Symbol, and is useful for accessing the field via an interface.
func (v *ReadHistoricPriceReadHistoricPriceHistoricPricesPair) GetSymbol() string { return v.Symbol }

// GetPrice returns ReadHistoricPriceReadHistoricPriceHistoricPricesPair.Price, and is useful for accessing the field via an interface.
func (v *ReadHistoricPriceReadHistoricPriceHistoricPricesPair) GetPrice() string { return v.Price }

// ReadHistoricPriceResponse is returned by ReadHistoricPrice on success.
type ReadHistoricPriceResponse struct {
	// Fetches price data for a given symbol up to a given limit of records
	ReadHistoricPrice []ReadHistoricPriceReadHistoricPriceHistoricPrices `json:"readHistoricPrice"`
}

// GetReadHistoricPrice returns ReadHistoricPriceResponse.ReadHistoricPrice, and is useful for accessing the field via an interface.
func (v *ReadHistoricPriceResponse) GetReadHistoricPrice() []ReadHistoricPriceReadHistoricPriceHistoricPrices {
	return v.ReadHistoricPrice
}

// ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPrices includes the requested fields of the GraphQL type HistoricPrices.
type ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPrices struct {
	Pair      []ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPricesPair `json:"Pair"`
	Timestamp int                                                                            `json:"Timestamp"`
}

// GetPair returns ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPrices.Pair, and is useful for accessing the field via an interface.
func (v *ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPrices) GetPair() []ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPricesPair {
	return v.Pair
}

// GetTimestamp returns ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPrices.Timestamp, and is useful for accessing the field via an interface.
func (v *ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPrices) GetTimestamp() int {
	return v.Timestamp
}

// ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPricesPair includes the requested fields of the GraphQL type Pair.
type ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPricesPair struct {
	Symbol string `json:"Symbol"`
	Price  string `json:"Price"`
}

// GetSymbol returns ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPricesPair.Symbol, and is useful for accessing the field via an interface.
func (v *ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPricesPair) GetSymbol() string {
	return v.Symbol
}

// GetPrice returns ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPricesPair.Price, and is useful for accessing the field via an interface.
func (v *ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPricesPair) GetPrice() string {
	return v.Price
}

// ReadHistoricPricesAtTimestampResponse is returned by ReadHistoricPricesAtTimestamp on success.
type ReadHistoricPricesAtTimestampResponse struct {
	// Gets all prices data at a given timestamp
	ReadHistoricPricesAtTimestamp []ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPrices `json:"readHistoricPricesAtTimestamp"`
}

// GetReadHistoricPricesAtTimestamp returns ReadHistoricPricesAtTimestampResponse.ReadHistoricPricesAtTimestamp, and is useful for accessing the field via an interface.
func (v *ReadHistoricPricesAtTimestampResponse) GetReadHistoricPricesAtTimestamp() []ReadHistoricPricesAtTimestampReadHistoricPricesAtTimestampHistoricPrices {
	return v.ReadHistoricPricesAtTimestamp
}

// ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStats includes the requested fields of the GraphQL type HistoricTickerStats.
type ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStats struct {
	Timestamp int                                                                                                       `json:"Timestamp"`
	Stats     []ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats `json:"Stats"`
}

// GetTimestamp returns ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStats.Timestamp, and is useful for accessing the field via an interface.
func (v *ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStats) GetTimestamp() int {
	return v.Timestamp
}

// GetStats returns ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStats.Stats, and is useful for accessing the field via an interface.
func (v *ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStats) GetStats() []ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats {
	return v.Stats
}

// ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats includes the requested fields of the GraphQL type TickerStats.
type ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats struct {
	Symbol            string `json:"Symbol"`
	PriceChange       string `json:"PriceChange"`
	PriceChangePct    string `json:"PriceChangePct"`
	QuoteVolume       string `json:"QuoteVolume"`
	Volume            string `json:"Volume"`
	TradeCount        int    `json:"TradeCount"`
	HighPrice         string `json:"HighPrice"`
	LowPrice          string `json:"LowPrice"`
	LastPrice         string `json:"LastPrice"`
	LiquidityEstimate string `json:"LiquidityEstimate"`
}

// GetSymbol returns ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats.Symbol, and is useful for accessing the field via an interface.
func (v *ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats) GetSymbol() string {
	return v.Symbol
}

// GetPriceChange returns ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats.PriceChange, and is useful for accessing the field via an interface.
func (v *ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats) GetPriceChange() string {
	return v.PriceChange
}

// GetPriceChangePct returns ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats.PriceChangePct, and is useful for accessing the field via an interface.
func (v *ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats) GetPriceChangePct() string {
	return v.PriceChangePct
}

// GetQuoteVolume returns ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats.QuoteVolume, and is useful for accessing the field via an interface.
func (v *ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats) GetQuoteVolume() string {
	return v.QuoteVolume
}

// GetVolume returns ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats.Volume, and is useful for accessing the field via an interface.
func (v *ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats) GetVolume() string {
	return v.Volume
}

// GetTradeCount returns ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats.TradeCount, and is useful for accessing the field via an interface.
func (v *ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats) GetTradeCount() int {
	return v.TradeCount
}

// GetHighPrice returns ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats.HighPrice, and is useful for accessing the field via an interface.
func (v *ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats) GetHighPrice() string {
	return v.HighPrice
}

// GetLowPrice returns ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats.LowPrice, and is useful for accessing the field via an interface.
func (v *ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats) GetLowPrice() string {
	return v.LowPrice
}

// GetLastPrice returns ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats.LastPrice, and is useful for accessing the field via an interface.
func (v *ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats) GetLastPrice() string {
	return v.LastPrice
}

// GetLiquidityEstimate returns ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats.LiquidityEstimate, and is useful for accessing the field via an interface.
func (v *ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStatsStatsTickerStats) GetLiquidityEstimate() string {
	return v.LiquidityEstimate
}

// ReadHistoricTickerStatsAtTimestampResponse is returned by ReadHistoricTickerStatsAtTimestamp on success.
type ReadHistoricTickerStatsAtTimestampResponse struct {
	// Gets all 24h Ticker Stats at a specific timestamp
	ReadHistoricTickerStatsAtTimestamp []ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStats `json:"readHistoricTickerStatsAtTimestamp"`
}

// GetReadHistoricTickerStatsAtTimestamp returns ReadHistoricTickerStatsAtTimestampResponse.ReadHistoricTickerStatsAtTimestamp, and is useful for accessing the field via an interface.
func (v *ReadHistoricTickerStatsAtTimestampResponse) GetReadHistoricTickerStatsAtTimestamp() []ReadHistoricTickerStatsAtTimestampReadHistoricTickerStatsAtTimestampHistoricTickerStats {
	return v.ReadHistoricTickerStatsAtTimestamp
}

// ReadProjectsFilterReadProjectsFilterProject includes the requested fields of the GraphQL type Project.
type ReadProjectsFilterReadProjectsFilterProject struct {
	Id          string                                                 `json:"id"`
	Title       string                                                 `json:"title"`
	Sop         bool                                                   `json:"sop"`
	Description string                                                 `json:"description"`
	Labels      []string                                               `json:"labels"`
	AssignedTo  string                                                 `json:"assignedTo"`
	DueDate     string                                                 `json:"dueDate"`
	Status      string                                                 `json:"status"`
	CreatedAt   string                                                 `json:"createdAt"`
	UpdatedAt   string                                                 `json:"updatedAt"`
	Tasks       []ReadProjectsFilterReadProjectsFilterProjectTasksTask `json:"tasks"`
}

// GetId returns ReadProjectsFilterReadProjectsFilterProject.Id, and is useful for accessing the field via an interface.
func (v *ReadProjectsFilterReadProjectsFilterProject) GetId() string { return v.Id }

// GetTitle returns ReadProjectsFilterReadProjectsFilterProject.Title, and is useful for accessing the field via an interface.
func (v *ReadProjectsFilterReadProjectsFilterProject) GetTitle() string { return v.Title }

// GetSop returns ReadProjectsFilterReadProjectsFilterProject.Sop, and is useful for accessing the field via an interface.
func (v *ReadProjectsFilterReadProjectsFilterProject) GetSop() bool { return v.Sop }

// GetDescription returns ReadProjectsFilterReadProjectsFilterProject.Description, and is useful for accessing the field via an interface.
func (v *ReadProjectsFilterReadProjectsFilterProject) GetDescription() string { return v.Description }

// GetLabels returns ReadProjectsFilterReadProjectsFilterProject.Labels, and is useful for accessing the field via an interface.
func (v *ReadProjectsFilterReadProjectsFilterProject) GetLabels() []string { return v.Labels }

// GetAssignedTo returns ReadProjectsFilterReadProjectsFilterProject.AssignedTo, and is useful for accessing the field via an interface.
func (v *ReadProjectsFilterReadProjectsFilterProject) GetAssignedTo() string { return v.AssignedTo }

// GetDueDate returns ReadProjectsFilterReadProjectsFilterProject.DueDate, and is useful for accessing the field via an interface.
func (v *ReadProjectsFilterReadProjectsFilterProject) GetDueDate() string { return v.DueDate }

// GetStatus returns ReadProjectsFilterReadProjectsFilterProject.Status, and is useful for accessing the field via an interface.
func (v *ReadProjectsFilterReadProjectsFilterProject) GetStatus() string { return v.Status }

// GetCreatedAt returns ReadProjectsFilterReadProjectsFilterProject.CreatedAt, and is useful for accessing the field via an interface.
func (v *ReadProjectsFilterReadProjectsFilterProject) GetCreatedAt() string { return v.CreatedAt }

// GetUpdatedAt returns ReadProjectsFilterReadProjectsFilterProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ReadProjectsFilterReadProjectsFilterProject) GetUpdatedAt() string { return v.UpdatedAt }

// GetTasks returns ReadProjectsFilterReadProjectsFilterProject.Tasks, and is useful for accessing the field via an interface.
func (v *ReadProjectsFilterReadProjectsFilterProject) GetTasks() []ReadProjectsFilterReadProjectsFilterProjectTasksTask {
	return v.Tasks
}

// ReadProjectsFilterReadProjectsFilterProjectTasksTask includes the requested fields of the GraphQL type Task.
type ReadProjectsFilterReadProjectsFilterProjectTasksTask struct {
	Id string `json:"id"`
}

// GetId returns ReadProjectsFilterReadProjectsFilterProjectTasksTask.Id, and is useful for accessing the field via an interface.
func (v *ReadProjectsFilterReadProjectsFilterProjectTasksTask) GetId() string { return v.Id }

// ReadProjectsFilterResponse is returned by ReadProjectsFilter on success.
type ReadProjectsFilterResponse struct {
	// Get projects filtered by SOP standard operating proceedure
	ReadProjectsFilter []ReadProjectsFilterReadProjectsFilterProject `json:"readProjectsFilter"`
}

// GetReadProjectsFilter returns ReadProjectsFilterResponse.ReadProjectsFilter, and is useful for accessing the field via an interface.
func (v *ReadProjectsFilterResponse) GetReadProjectsFilter() []ReadProjectsFilterReadProjectsFilterProject {
	return v.ReadProjectsFilter
}

// ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats includes the requested fields of the GraphQL type SymbolStats.
type ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats struct {
	Symbol               string       `json:"Symbol"`
	PositionCounts       []model.Mean `json:"PositionCounts"`
	LiquidityEstimate    model.Mean   `json:"LiquidityEstimate"`
	MaxLiquidityEstimate float64      `json:"MaxLiquidityEstimate"`
	MinLiquidityEstimate float64      `json:"MinLiquidityEstimate"`
}

// GetSymbol returns ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats.Symbol, and is useful for accessing the field via an interface.
func (v *ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats) GetSymbol() string {
	return v.Symbol
}

// GetPositionCounts returns ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats.PositionCounts, and is useful for accessing the field via an interface.
func (v *ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats) GetPositionCounts() []model.Mean {
	return v.PositionCounts
}

// GetLiquidityEstimate returns ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats.LiquidityEstimate, and is useful for accessing the field via an interface.
func (v *ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats) GetLiquidityEstimate() model.Mean {
	return v.LiquidityEstimate
}

// GetMaxLiquidityEstimate returns ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats.MaxLiquidityEstimate, and is useful for accessing the field via an interface.
func (v *ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats) GetMaxLiquidityEstimate() float64 {
	return v.MaxLiquidityEstimate
}

// GetMinLiquidityEstimate returns ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats.MinLiquidityEstimate, and is useful for accessing the field via an interface.
func (v *ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats) GetMinLiquidityEstimate() float64 {
	return v.MinLiquidityEstimate
}

// ReadSingleSymbolStatsBySymbolResponse is returned by ReadSingleSymbolStatsBySymbol on success.
type ReadSingleSymbolStatsBySymbolResponse struct {
	// Get Symbol Stats by Symbol
	ReadSingleSymbolStatsBySymbol ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats `json:"ReadSingleSymbolStatsBySymbol"`
}

// GetReadSingleSymbolStatsBySymbol returns ReadSingleSymbolStatsBySymbolResponse.ReadSingleSymbolStatsBySymbol, and is useful for accessing the field via an interface.
func (v *ReadSingleSymbolStatsBySymbolResponse) GetReadSingleSymbolStatsBySymbol() ReadSingleSymbolStatsBySymbolReadSingleSymbolStatsBySymbolSymbolStats {
	return v.ReadSingleSymbolStatsBySymbol
}

// ReadTickerStatsBySymbolReadTickerStatsBySymbolTickerStats includes the requested fields of the GraphQL type TickerStats.
type ReadTickerStatsBySymbolReadTickerStatsBySymbolTickerStats struct {
	LiquidityEstimate string `json:"LiquidityEstimate"`
}

// GetLiquidityEstimate returns ReadTickerStatsBySymbolReadTickerStatsBySymbolTickerStats.LiquidityEstimate, and is useful for accessing the field via an interface.
func (v *ReadTickerStatsBySymbolReadTickerStatsBySymbolTickerStats) GetLiquidityEstimate() string {
	return v.LiquidityEstimate
}

// ReadTickerStatsBySymbolResponse is returned by ReadTickerStatsBySymbol on success.
type ReadTickerStatsBySymbolResponse struct {
	// Fetches TickerStats history for a given symbol (e.g., to chart volatility or volume)
	ReadTickerStatsBySymbol []ReadTickerStatsBySymbolReadTickerStatsBySymbolTickerStats `json:"readTickerStatsBySymbol"`
}

// GetReadTickerStatsBySymbol returns ReadTickerStatsBySymbolResponse.ReadTickerStatsBySymbol, and is useful for accessing the field via an interface.
func (v *ReadTickerStatsBySymbolResponse) GetReadTickerStatsBySymbol() []ReadTickerStatsBySymbolReadTickerStatsBySymbolTickerStats {
	return v.ReadTickerStatsBySymbol
}

// ReadUserByEmailReadUserByEmailUser includes the requested fields of the GraphQL type User.
type ReadUserByEmailReadUserByEmailUser struct {
	Id    string `json:"id"`
	Email string `json:"email"`
}

// GetId returns ReadUserByEmailReadUserByEmailUser.Id, and is useful for accessing the field via an interface.
func (v *ReadUserByEmailReadUserByEmailUser) GetId() string { return v.Id }

// GetEmail returns ReadUserByEmailReadUserByEmailUser.Email, and is useful for accessing the field via an interface.
func (v *ReadUserByEmailReadUserByEmailUser) GetEmail() string { return v.Email }

// ReadUserByEmailResponse is returned by ReadUserByEmail on success.
type ReadUserByEmailResponse struct {
	// Get user by email
	ReadUserByEmail ReadUserByEmailReadUserByEmailUser `json:"readUserByEmail"`
}

// GetReadUserByEmail returns ReadUserByEmailResponse.ReadUserByEmail, and is useful for accessing the field via an interface.
func (v *ReadUserByEmailResponse) GetReadUserByEmail() ReadUserByEmailReadUserByEmailUser {
	return v.ReadUserByEmail
}

type TickerStatsInput struct {
	Symbol            string `json:"Symbol"`
	PriceChange       string `json:"PriceChange"`
	PriceChangePct    string `json:"PriceChangePct"`
	QuoteVolume       string `json:"QuoteVolume"`
	Volume            string `json:"Volume"`
	TradeCount        int    `json:"TradeCount"`
	HighPrice         string `json:"HighPrice"`
	LowPrice          string `json:"LowPrice"`
	LastPrice         string `json:"LastPrice"`
	LiquidityEstimate string `json:"LiquidityEstimate"`
}

// GetSymbol returns TickerStatsInput.Symbol, and is useful for accessing the field via an interface.
func (v *TickerStatsInput) GetSymbol() string { return v.Symbol }

// GetPriceChange returns TickerStatsInput.PriceChange, and is useful for accessing the field via an interface.
func (v *TickerStatsInput) GetPriceChange() string { return v.PriceChange }

// GetPriceChangePct returns TickerStatsInput.PriceChangePct, and is useful for accessing the field via an interface.
func (v *TickerStatsInput) GetPriceChangePct() string { return v.PriceChangePct }

// GetQuoteVolume returns TickerStatsInput.QuoteVolume, and is useful for accessing the field via an interface.
func (v *TickerStatsInput) GetQuoteVolume() string { return v.QuoteVolume }

// GetVolume returns TickerStatsInput.Volume, and is useful for accessing the field via an interface.
func (v *TickerStatsInput) GetVolume() string { return v.Volume }

// GetTradeCount returns TickerStatsInput.TradeCount, and is useful for accessing the field via an interface.
func (v *TickerStatsInput) GetTradeCount() int { return v.TradeCount }

// GetHighPrice returns TickerStatsInput.HighPrice, and is useful for accessing the field via an interface.
func (v *TickerStatsInput) GetHighPrice() string { return v.HighPrice }

// GetLowPrice returns TickerStatsInput.LowPrice, and is useful for accessing the field via an interface.
func (v *TickerStatsInput) GetLowPrice() string { return v.LowPrice }

// GetLastPrice returns TickerStatsInput.LastPrice, and is useful for accessing the field via an interface.
func (v *TickerStatsInput) GetLastPrice() string { return v.LastPrice }

// GetLiquidityEstimate returns TickerStatsInput.LiquidityEstimate, and is useful for accessing the field via an interface.
func (v *TickerStatsInput) GetLiquidityEstimate() string { return v.LiquidityEstimate }

type UpdateCountersInput struct {
	BotInstanceName    string  `json:"BotInstanceName"`
	WINCounter         bool    `json:"WINCounter"`
	LOSSCounter        bool    `json:"LOSSCounter"`
	TIMEOUTGainCounter bool    `json:"TIMEOUTGainCounter"`
	TIMEOUTLossCounter bool    `json:"TIMEOUTLossCounter"`
	NetGainCounter     bool    `json:"NetGainCounter"`
	NetLossCounter     bool    `json:"NetLossCounter"`
	AccountBalance     float64 `json:"AccountBalance"`
	FeesTotal          float64 `json:"FeesTotal"`
}

// GetBotInstanceName returns UpdateCountersInput.BotInstanceName, and is useful for accessing the field via an interface.
func (v *UpdateCountersInput) GetBotInstanceName() string { return v.BotInstanceName }

// GetWINCounter returns UpdateCountersInput.WINCounter, and is useful for accessing the field via an interface.
func (v *UpdateCountersInput) GetWINCounter() bool { return v.WINCounter }

// GetLOSSCounter returns UpdateCountersInput.LOSSCounter, and is useful for accessing the field via an interface.
func (v *UpdateCountersInput) GetLOSSCounter() bool { return v.LOSSCounter }

// GetTIMEOUTGainCounter returns UpdateCountersInput.TIMEOUTGainCounter, and is useful for accessing the field via an interface.
func (v *UpdateCountersInput) GetTIMEOUTGainCounter() bool { return v.TIMEOUTGainCounter }

// GetTIMEOUTLossCounter returns UpdateCountersInput.TIMEOUTLossCounter, and is useful for accessing the field via an interface.
func (v *UpdateCountersInput) GetTIMEOUTLossCounter() bool { return v.TIMEOUTLossCounter }

// GetNetGainCounter returns UpdateCountersInput.NetGainCounter, and is useful for accessing the field via an interface.
func (v *UpdateCountersInput) GetNetGainCounter() bool { return v.NetGainCounter }

// GetNetLossCounter returns UpdateCountersInput.NetLossCounter, and is useful for accessing the field via an interface.
func (v *UpdateCountersInput) GetNetLossCounter() bool { return v.NetLossCounter }

// GetAccountBalance returns UpdateCountersInput.AccountBalance, and is useful for accessing the field via an interface.
func (v *UpdateCountersInput) GetAccountBalance() float64 { return v.AccountBalance }

// GetFeesTotal returns UpdateCountersInput.FeesTotal, and is useful for accessing the field via an interface.
func (v *UpdateCountersInput) GetFeesTotal() float64 { return v.FeesTotal }

// UpdateCountersResponse is returned by UpdateCounters on success.
type UpdateCountersResponse struct {
	// Updates the outcome counters and account balance help on the strategy object
	UpdateCounters bool `json:"updateCounters"`
}

// GetUpdateCounters returns UpdateCountersResponse.UpdateCounters, and is useful for accessing the field via an interface.
func (v *UpdateCountersResponse) GetUpdateCounters() bool { return v.UpdateCounters }

// UpsertLiquidityEstimateResponse is returned by UpsertLiquidityEstimate on success.
type UpsertLiquidityEstimateResponse struct {
	// If the symbol exists, update it. If not, create it
	UpsertSymbolStats UpsertLiquidityEstimateUpsertSymbolStats `json:"upsertSymbolStats"`
}

// GetUpsertSymbolStats returns UpsertLiquidityEstimateResponse.UpsertSymbolStats, and is useful for accessing the field via an interface.
func (v *UpsertLiquidityEstimateResponse) GetUpsertSymbolStats() UpsertLiquidityEstimateUpsertSymbolStats {
	return v.UpsertSymbolStats
}

// UpsertLiquidityEstimateUpsertSymbolStats includes the requested fields of the GraphQL type SymbolStats.
type UpsertLiquidityEstimateUpsertSymbolStats struct {
	Symbol               string     `json:"Symbol"`
	LiquidityEstimate    model.Mean `json:"LiquidityEstimate"`
	MaxLiquidityEstimate float64    `json:"MaxLiquidityEstimate"`
	MinLiquidityEstimate float64    `json:"MinLiquidityEstimate"`
}

// GetSymbol returns UpsertLiquidityEstimateUpsertSymbolStats.Symbol, and is useful for accessing the field via an interface.
func (v *UpsertLiquidityEstimateUpsertSymbolStats) GetSymbol() string { return v.Symbol }

// GetLiquidityEstimate returns UpsertLiquidityEstimateUpsertSymbolStats.LiquidityEstimate, and is useful for accessing the field via an interface.
func (v *UpsertLiquidityEstimateUpsertSymbolStats) GetLiquidityEstimate() model.Mean {
	return v.LiquidityEstimate
}

// GetMaxLiquidityEstimate returns UpsertLiquidityEstimateUpsertSymbolStats.MaxLiquidityEstimate, and is useful for accessing the field via an interface.
func (v *UpsertLiquidityEstimateUpsertSymbolStats) GetMaxLiquidityEstimate() float64 {
	return v.MaxLiquidityEstimate
}

// GetMinLiquidityEstimate returns UpsertLiquidityEstimateUpsertSymbolStats.MinLiquidityEstimate, and is useful for accessing the field via an interface.
func (v *UpsertLiquidityEstimateUpsertSymbolStats) GetMinLiquidityEstimate() float64 {
	return v.MinLiquidityEstimate
}

// UpsertPositionCountsResponse is returned by UpsertPositionCounts on success.
type UpsertPositionCountsResponse struct {
	// If the symbol exists, update it. If not, create it
	UpsertSymbolStats UpsertPositionCountsUpsertSymbolStats `json:"upsertSymbolStats"`
}

// GetUpsertSymbolStats returns UpsertPositionCountsResponse.UpsertSymbolStats, and is useful for accessing the field via an interface.
func (v *UpsertPositionCountsResponse) GetUpsertSymbolStats() UpsertPositionCountsUpsertSymbolStats {
	return v.UpsertSymbolStats
}

// UpsertPositionCountsUpsertSymbolStats includes the requested fields of the GraphQL type SymbolStats.
type UpsertPositionCountsUpsertSymbolStats struct {
	Symbol         string       `json:"Symbol"`
	PositionCounts []model.Mean `json:"PositionCounts"`
}

// GetSymbol returns UpsertPositionCountsUpsertSymbolStats.Symbol, and is useful for accessing the field via an interface.
func (v *UpsertPositionCountsUpsertSymbolStats) GetSymbol() string { return v.Symbol }

// GetPositionCounts returns UpsertPositionCountsUpsertSymbolStats.PositionCounts, and is useful for accessing the field via an interface.
func (v *UpsertPositionCountsUpsertSymbolStats) GetPositionCounts() []model.Mean {
	return v.PositionCounts
}

// __CreateActivityReportInput is used internally by genqlient
type __CreateActivityReportInput struct {
	TimeStamp      int     `json:"timeStamp"`
	Qty            int     `json:"qty"`
	AvgGain        float64 `json:"avgGain"`
	TopAGain       float64 `json:"topAGain"`
	TopBGain       float64 `json:"topBGain"`
	TopCGain       float64 `json:"topCGain"`
	FearGreedIndex int     `json:"fearGreedIndex"`
}

// GetTimeStamp returns __CreateActivityReportInput.TimeStamp, and is useful for accessing the field via an interface.
func (v *__CreateActivityReportInput) GetTimeStamp() int { return v.TimeStamp }

// GetQty returns __CreateActivityReportInput.Qty, and is useful for accessing the field via an interface.
func (v *__CreateActivityReportInput) GetQty() int { return v.Qty }

// GetAvgGain returns __CreateActivityReportInput.AvgGain, and is useful for accessing the field via an interface.
func (v *__CreateActivityReportInput) GetAvgGain() float64 { return v.AvgGain }

// GetTopAGain returns __CreateActivityReportInput.TopAGain, and is useful for accessing the field via an interface.
func (v *__CreateActivityReportInput) GetTopAGain() float64 { return v.TopAGain }

// GetTopBGain returns __CreateActivityReportInput.TopBGain, and is useful for accessing the field via an interface.
func (v *__CreateActivityReportInput) GetTopBGain() float64 { return v.TopBGain }

// GetTopCGain returns __CreateActivityReportInput.TopCGain, and is useful for accessing the field via an interface.
func (v *__CreateActivityReportInput) GetTopCGain() float64 { return v.TopCGain }

// GetFearGreedIndex returns __CreateActivityReportInput.FearGreedIndex, and is useful for accessing the field via an interface.
func (v *__CreateActivityReportInput) GetFearGreedIndex() int { return v.FearGreedIndex }

// __CreateHistoricPricesInput is used internally by genqlient
type __CreateHistoricPricesInput struct {
	Input NewHistoricPriceInput `json:"input"`
}

// GetInput returns __CreateHistoricPricesInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateHistoricPricesInput) GetInput() NewHistoricPriceInput { return v.Input }

// __CreateHistoricTickerStatsInput is used internally by genqlient
type __CreateHistoricTickerStatsInput struct {
	Input NewHistoricTickerStatsInput `json:"input"`
}

// GetInput returns __CreateHistoricTickerStatsInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateHistoricTickerStatsInput) GetInput() NewHistoricTickerStatsInput { return v.Input }

// __CreateProjectInput is used internally by genqlient
type __CreateProjectInput struct {
	Input CreateProjectInput `json:"input"`
}

// GetInput returns __CreateProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateProjectInput) GetInput() CreateProjectInput { return v.Input }

// __CreateTaskInput is used internally by genqlient
type __CreateTaskInput struct {
	Input CreateTaskInput `json:"input"`
}

// GetInput returns __CreateTaskInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateTaskInput) GetInput() CreateTaskInput { return v.Input }

// __CreateTradeOutcomeReportInput is used internally by genqlient
type __CreateTradeOutcomeReportInput struct {
	TimeStamp        int     `json:"timeStamp"`
	BotName          string  `json:"botName"`
	PercentageChange float64 `json:"percentageChange"`
	Balance          float64 `json:"balance"`
	Symbol           string  `json:"symbol"`
	Outcome          string  `json:"outcome"`
	Fee              float64 `json:"Fee"`
	ElapsedTime      int     `json:"elapsedTime"`
	Volume           float64 `json:"volume"`
	FearGreedIndex   int     `json:"fearGreedIndex"`
	MarketStatus     string  `json:"marketStatus"`
}

// GetTimeStamp returns __CreateTradeOutcomeReportInput.TimeStamp, and is useful for accessing the field via an interface.
func (v *__CreateTradeOutcomeReportInput) GetTimeStamp() int { return v.TimeStamp }

// GetBotName returns __CreateTradeOutcomeReportInput.BotName, and is useful for accessing the field via an interface.
func (v *__CreateTradeOutcomeReportInput) GetBotName() string { return v.BotName }

// GetPercentageChange returns __CreateTradeOutcomeReportInput.PercentageChange, and is useful for accessing the field via an interface.
func (v *__CreateTradeOutcomeReportInput) GetPercentageChange() float64 { return v.PercentageChange }

// GetBalance returns __CreateTradeOutcomeReportInput.Balance, and is useful for accessing the field via an interface.
func (v *__CreateTradeOutcomeReportInput) GetBalance() float64 { return v.Balance }

// GetSymbol returns __CreateTradeOutcomeReportInput.Symbol, and is useful for accessing the field via an interface.
func (v *__CreateTradeOutcomeReportInput) GetSymbol() string { return v.Symbol }

// GetOutcome returns __CreateTradeOutcomeReportInput.Outcome, and is useful for accessing the field via an interface.
func (v *__CreateTradeOutcomeReportInput) GetOutcome() string { return v.Outcome }

// GetFee returns __CreateTradeOutcomeReportInput.Fee, and is useful for accessing the field via an interface.
func (v *__CreateTradeOutcomeReportInput) GetFee() float64 { return v.Fee }

// GetElapsedTime returns __CreateTradeOutcomeReportInput.ElapsedTime, and is useful for accessing the field via an interface.
func (v *__CreateTradeOutcomeReportInput) GetElapsedTime() int { return v.ElapsedTime }

// GetVolume returns __CreateTradeOutcomeReportInput.Volume, and is useful for accessing the field via an interface.
func (v *__CreateTradeOutcomeReportInput) GetVolume() float64 { return v.Volume }

// GetFearGreedIndex returns __CreateTradeOutcomeReportInput.FearGreedIndex, and is useful for accessing the field via an interface.
func (v *__CreateTradeOutcomeReportInput) GetFearGreedIndex() int { return v.FearGreedIndex }

// GetMarketStatus returns __CreateTradeOutcomeReportInput.MarketStatus, and is useful for accessing the field via an interface.
func (v *__CreateTradeOutcomeReportInput) GetMarketStatus() string { return v.MarketStatus }

// __CreateUserInput is used internally by genqlient
type __CreateUserInput struct {
	Input CreateUserInput `json:"input"`
}

// GetInput returns __CreateUserInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateUserInput) GetInput() CreateUserInput { return v.Input }

// __ReadHistoricPriceInput is used internally by genqlient
type __ReadHistoricPriceInput struct {
	Symbol string `json:"symbol"`
	Limit  int    `json:"limit"`
}

// GetSymbol returns __ReadHistoricPriceInput.Symbol, and is useful for accessing the field via an interface.
func (v *__ReadHistoricPriceInput) GetSymbol() string { return v.Symbol }

// GetLimit returns __ReadHistoricPriceInput.Limit, and is useful for accessing the field via an interface.
func (v *__ReadHistoricPriceInput) GetLimit() int { return v.Limit }

// __ReadHistoricPricesAtTimestampInput is used internally by genqlient
type __ReadHistoricPricesAtTimestampInput struct {
	Datetime int `json:"datetime"`
}

// GetDatetime returns __ReadHistoricPricesAtTimestampInput.Datetime, and is useful for accessing the field via an interface.
func (v *__ReadHistoricPricesAtTimestampInput) GetDatetime() int { return v.Datetime }

// __ReadHistoricTickerStatsAtTimestampInput is used internally by genqlient
type __ReadHistoricTickerStatsAtTimestampInput struct {
	Datetime int `json:"datetime"`
}

// GetDatetime returns __ReadHistoricTickerStatsAtTimestampInput.Datetime, and is useful for accessing the field via an interface.
func (v *__ReadHistoricTickerStatsAtTimestampInput) GetDatetime() int { return v.Datetime }

// __ReadProjectsFilterInput is used internally by genqlient
type __ReadProjectsFilterInput struct {
	IsSop bool `json:"isSop"`
}

// GetIsSop returns __ReadProjectsFilterInput.IsSop, and is useful for accessing the field via an interface.
func (v *__ReadProjectsFilterInput) GetIsSop() bool { return v.IsSop }

// __ReadSingleSymbolStatsBySymbolInput is used internally by genqlient
type __ReadSingleSymbolStatsBySymbolInput struct {
	Symbol string `json:"symbol"`
}

// GetSymbol returns __ReadSingleSymbolStatsBySymbolInput.Symbol, and is useful for accessing the field via an interface.
func (v *__ReadSingleSymbolStatsBySymbolInput) GetSymbol() string { return v.Symbol }

// __ReadTickerStatsBySymbolInput is used internally by genqlient
type __ReadTickerStatsBySymbolInput struct {
	Symbol string `json:"symbol"`
	Limit  int    `json:"limit"`
}

// GetSymbol returns __ReadTickerStatsBySymbolInput.Symbol, and is useful for accessing the field via an interface.
func (v *__ReadTickerStatsBySymbolInput) GetSymbol() string { return v.Symbol }

// GetLimit returns __ReadTickerStatsBySymbolInput.Limit, and is useful for accessing the field via an interface.
func (v *__ReadTickerStatsBySymbolInput) GetLimit() int { return v.Limit }

// __ReadUserByEmailInput is used internally by genqlient
type __ReadUserByEmailInput struct {
	Email string `json:"email"`
}

// GetEmail returns __ReadUserByEmailInput.Email, and is useful for accessing the field via an interface.
func (v *__ReadUserByEmailInput) GetEmail() string { return v.Email }

// __UpdateCountersInput is used internally by genqlient
type __UpdateCountersInput struct {
	Input UpdateCountersInput `json:"input"`
}

// GetInput returns __UpdateCountersInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateCountersInput) GetInput() UpdateCountersInput { return v.Input }

// __UpsertLiquidityEstimateInput is used internally by genqlient
type __UpsertLiquidityEstimateInput struct {
	Symbol               string          `json:"symbol"`
	LiquidityEstimate    model.MeanInput `json:"liquidityEstimate"`
	MaxLiquidityEstimate float64         `json:"maxLiquidityEstimate"`
	MinLiquidityEstimate float64         `json:"minLiquidityEstimate"`
}

// GetSymbol returns __UpsertLiquidityEstimateInput.Symbol, and is useful for accessing the field via an interface.
func (v *__UpsertLiquidityEstimateInput) GetSymbol() string { return v.Symbol }

// GetLiquidityEstimate returns __UpsertLiquidityEstimateInput.LiquidityEstimate, and is useful for accessing the field via an interface.
func (v *__UpsertLiquidityEstimateInput) GetLiquidityEstimate() model.MeanInput {
	return v.LiquidityEstimate
}

// GetMaxLiquidityEstimate returns __UpsertLiquidityEstimateInput.MaxLiquidityEstimate, and is useful for accessing the field via an interface.
func (v *__UpsertLiquidityEstimateInput) GetMaxLiquidityEstimate() float64 {
	return v.MaxLiquidityEstimate
}

// GetMinLiquidityEstimate returns __UpsertLiquidityEstimateInput.MinLiquidityEstimate, and is useful for accessing the field via an interface.
func (v *__UpsertLiquidityEstimateInput) GetMinLiquidityEstimate() float64 {
	return v.MinLiquidityEstimate
}

// __UpsertPositionCountsInput is used internally by genqlient
type __UpsertPositionCountsInput struct {
	Symbol         string            `json:"symbol"`
	PositionCounts []model.MeanInput `json:"positionCounts"`
}

// GetSymbol returns __UpsertPositionCountsInput.Symbol, and is useful for accessing the field via an interface.
func (v *__UpsertPositionCountsInput) GetSymbol() string { return v.Symbol }

// GetPositionCounts returns __UpsertPositionCountsInput.PositionCounts, and is useful for accessing the field via an interface.
func (v *__UpsertPositionCountsInput) GetPositionCounts() []model.MeanInput { return v.PositionCounts }

// The mutation executed by CreateActivityReport.
const CreateActivityReport_Operation = `
mutation CreateActivityReport ($timeStamp: Int!, $qty: Int!, $avgGain: Float!, $topAGain: Float, $topBGain: Float, $topCGain: Float, $fearGreedIndex: Int!) {
	createActivityReport(input: {Timestamp:$timeStamp,Qty:$qty,AvgGain:$avgGain,TopAGain:$topAGain,TopBGain:$topBGain,TopCGain:$topCGain,FearGreedIndex:$fearGreedIndex}) {
		_id
		Timestamp
		Qty
		AvgGain
		TopAGain
		TopBGain
		TopCGain
		FearGreedIndex
	}
}
`

func CreateActivityReport(
	ctx_ context.Context,
	client_ graphql.Client,
	timeStamp int,
	qty int,
	avgGain float64,
	topAGain float64,
	topBGain float64,
	topCGain float64,
	fearGreedIndex int,
) (data_ *CreateActivityReportResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateActivityReport",
		Query:  CreateActivityReport_Operation,
		Variables: &__CreateActivityReportInput{
			TimeStamp:      timeStamp,
			Qty:            qty,
			AvgGain:        avgGain,
			TopAGain:       topAGain,
			TopBGain:       topBGain,
			TopCGain:       topCGain,
			FearGreedIndex: fearGreedIndex,
		},
	}

	data_ = &CreateActivityReportResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateHistoricPrices.
const CreateHistoricPrices_Operation = `
mutation CreateHistoricPrices ($input: NewHistoricPriceInput!) {
	createHistoricPrices(input: $input) {
		Pair {
			Symbol
			Price
		}
	}
}
`

func CreateHistoricPrices(
	ctx_ context.Context,
	client_ graphql.Client,
	input NewHistoricPriceInput,
) (data_ *CreateHistoricPricesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateHistoricPrices",
		Query:  CreateHistoricPrices_Operation,
		Variables: &__CreateHistoricPricesInput{
			Input: input,
		},
	}

	data_ = &CreateHistoricPricesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateHistoricTickerStats.
const CreateHistoricTickerStats_Operation = `
mutation CreateHistoricTickerStats ($input: NewHistoricTickerStatsInput!) {
	createHistoricTickerStats(input: $input) {
		Timestamp
		Stats {
			Symbol
			PriceChange
			PriceChangePct
			QuoteVolume
			Volume
			TradeCount
			HighPrice
			LowPrice
			LastPrice
			LiquidityEstimate
		}
		CreatedAt
	}
}
`

func CreateHistoricTickerStats(
	ctx_ context.Context,
	client_ graphql.Client,
	input NewHistoricTickerStatsInput,
) (data_ *CreateHistoricTickerStatsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateHistoricTickerStats",
		Query:  CreateHistoricTickerStats_Operation,
		Variables: &__CreateHistoricTickerStatsInput{
			Input: input,
		},
	}

	data_ = &CreateHistoricTickerStatsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateProject.
const CreateProject_Operation = `
mutation CreateProject ($input: CreateProjectInput!) {
	createProject(input: $input) {
		id
		title
		sop
		description
		labels
		assignedTo
		dueDate
		status
		createdAt
		updatedAt
	}
}
`

func CreateProject(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateProjectInput,
) (data_ *CreateProjectResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateProject",
		Query:  CreateProject_Operation,
		Variables: &__CreateProjectInput{
			Input: input,
		},
	}

	data_ = &CreateProjectResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateTask.
const CreateTask_Operation = `
mutation CreateTask ($input: CreateTaskInput!) {
	createTask(input: $input) {
		id
		title
		description
		status
		labels
		assignedTo
		dueDate
		deferDate
		department
		projectId
		duration
		createdAt
		updatedAt
	}
}
`

func CreateTask(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateTaskInput,
) (data_ *CreateTaskResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateTask",
		Query:  CreateTask_Operation,
		Variables: &__CreateTaskInput{
			Input: input,
		},
	}

	data_ = &CreateTaskResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateTradeOutcomeReport.
const CreateTradeOutcomeReport_Operation = `
mutation CreateTradeOutcomeReport ($timeStamp: Int!, $botName: String!, $percentageChange: Float!, $balance: Float!, $symbol: String!, $outcome: String!, $Fee: Float, $elapsedTime: Int!, $volume: Float!, $fearGreedIndex: Int!, $marketStatus: String!) {
	createTradeOutcomeReport(input: {Timestamp:$timeStamp,BotName:$botName,PercentageChange:$percentageChange,Balance:$balance,Symbol:$symbol,Outcome:$outcome,Fee:$Fee,ElapsedTime:$elapsedTime,Volume:$volume,FearGreedIndex:$fearGreedIndex,MarketStatus:$marketStatus}) {
		_id
		Timestamp
		BotName
		PercentageChange
		Balance
		Symbol
		Outcome
		Fee
		ElapsedTime
		Volume
		FearGreedIndex
		MarketStatus
	}
}
`

func CreateTradeOutcomeReport(
	ctx_ context.Context,
	client_ graphql.Client,
	timeStamp int,
	botName string,
	percentageChange float64,
	balance float64,
	symbol string,
	outcome string,
	Fee float64,
	elapsedTime int,
	volume float64,
	fearGreedIndex int,
	marketStatus string,
) (data_ *CreateTradeOutcomeReportResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateTradeOutcomeReport",
		Query:  CreateTradeOutcomeReport_Operation,
		Variables: &__CreateTradeOutcomeReportInput{
			TimeStamp:        timeStamp,
			BotName:          botName,
			PercentageChange: percentageChange,
			Balance:          balance,
			Symbol:           symbol,
			Outcome:          outcome,
			Fee:              Fee,
			ElapsedTime:      elapsedTime,
			Volume:           volume,
			FearGreedIndex:   fearGreedIndex,
			MarketStatus:     marketStatus,
		},
	}

	data_ = &CreateTradeOutcomeReportResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by CreateUser.
const CreateUser_Operation = `
mutation CreateUser ($input: CreateUserInput!) {
	createUser(input: $input) {
		id
		firstName
		lastName
		email
		role
	}
}
`

func CreateUser(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateUserInput,
) (data_ *CreateUserResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "CreateUser",
		Query:  CreateUser_Operation,
		Variables: &__CreateUserInput{
			Input: input,
		},
	}

	data_ = &CreateUserResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ReadAllStrategies.
const ReadAllStrategies_Operation = `
query ReadAllStrategies {
	readAllStrategies {
		BotInstanceName
		TradeDuration
		IncrementsATR
		LongSMADuration
		ShortSMADuration
		WINCounter
		LOSSCounter
		TIMEOUTGainCounter
		TIMEOUTLossCounter
		NetGainCounter
		NetLossCounter
		AccountBalance
		MovingAveMomentum
		TakeProfitPercentage
		StopLossPercentage
		ATRtollerance
		FeesTotal
		Tested
		Owner
		CreatedOn
	}
}
`

func ReadAllStrategies(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *ReadAllStrategiesResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ReadAllStrategies",
		Query:  ReadAllStrategies_Operation,
	}

	data_ = &ReadAllStrategiesResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ReadAllTasks.
const ReadAllTasks_Operation = `
query ReadAllTasks {
	readAllTasks {
		id
		title
		description
		status
		labels
		assignedTo
		dueDate
		deferDate
		department
		projectId
		duration
		createdAt
		updatedAt
	}
}
`

func ReadAllTasks(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *ReadAllTasksResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ReadAllTasks",
		Query:  ReadAllTasks_Operation,
	}

	data_ = &ReadAllTasksResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ReadHistoricPrice.
const ReadHistoricPrice_Operation = `
query ReadHistoricPrice ($symbol: String!, $limit: Int!) {
	readHistoricPrice(symbol: $symbol, limit: $limit) {
		Pair {
			Symbol
			Price
		}
		Timestamp
	}
}
`

func ReadHistoricPrice(
	ctx_ context.Context,
	client_ graphql.Client,
	symbol string,
	limit int,
) (data_ *ReadHistoricPriceResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ReadHistoricPrice",
		Query:  ReadHistoricPrice_Operation,
		Variables: &__ReadHistoricPriceInput{
			Symbol: symbol,
			Limit:  limit,
		},
	}

	data_ = &ReadHistoricPriceResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ReadHistoricPricesAtTimestamp.
const ReadHistoricPricesAtTimestamp_Operation = `
query ReadHistoricPricesAtTimestamp ($datetime: Int!) {
	readHistoricPricesAtTimestamp(Timestamp: $datetime) {
		Pair {
			Symbol
			Price
		}
		Timestamp
	}
}
`

func ReadHistoricPricesAtTimestamp(
	ctx_ context.Context,
	client_ graphql.Client,
	datetime int,
) (data_ *ReadHistoricPricesAtTimestampResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ReadHistoricPricesAtTimestamp",
		Query:  ReadHistoricPricesAtTimestamp_Operation,
		Variables: &__ReadHistoricPricesAtTimestampInput{
			Datetime: datetime,
		},
	}

	data_ = &ReadHistoricPricesAtTimestampResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ReadHistoricTickerStatsAtTimestamp.
const ReadHistoricTickerStatsAtTimestamp_Operation = `
query ReadHistoricTickerStatsAtTimestamp ($datetime: Int!) {
	readHistoricTickerStatsAtTimestamp(Timestamp: $datetime) {
		Timestamp
		Stats {
			Symbol
			PriceChange
			PriceChangePct
			QuoteVolume
			Volume
			TradeCount
			HighPrice
			LowPrice
			LastPrice
			LiquidityEstimate
		}
	}
}
`

func ReadHistoricTickerStatsAtTimestamp(
	ctx_ context.Context,
	client_ graphql.Client,
	datetime int,
) (data_ *ReadHistoricTickerStatsAtTimestampResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ReadHistoricTickerStatsAtTimestamp",
		Query:  ReadHistoricTickerStatsAtTimestamp_Operation,
		Variables: &__ReadHistoricTickerStatsAtTimestampInput{
			Datetime: datetime,
		},
	}

	data_ = &ReadHistoricTickerStatsAtTimestampResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ReadProjectsFilter.
const ReadProjectsFilter_Operation = `
query ReadProjectsFilter ($isSop: Boolean) {
	readProjectsFilter(filter: {sop:$isSop}) {
		id
		title
		sop
		description
		labels
		assignedTo
		dueDate
		status
		createdAt
		updatedAt
		tasks {
			id
		}
	}
}
`

func ReadProjectsFilter(
	ctx_ context.Context,
	client_ graphql.Client,
	isSop bool,
) (data_ *ReadProjectsFilterResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ReadProjectsFilter",
		Query:  ReadProjectsFilter_Operation,
		Variables: &__ReadProjectsFilterInput{
			IsSop: isSop,
		},
	}

	data_ = &ReadProjectsFilterResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ReadSingleSymbolStatsBySymbol.
const ReadSingleSymbolStatsBySymbol_Operation = `
query ReadSingleSymbolStatsBySymbol ($symbol: String!) {
	ReadSingleSymbolStatsBySymbol(Symbol: $symbol) {
		Symbol
		PositionCounts {
			Avg
			Count
		}
		LiquidityEstimate {
			Avg
			Count
		}
		MaxLiquidityEstimate
		MinLiquidityEstimate
	}
}
`

func ReadSingleSymbolStatsBySymbol(
	ctx_ context.Context,
	client_ graphql.Client,
	symbol string,
) (data_ *ReadSingleSymbolStatsBySymbolResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ReadSingleSymbolStatsBySymbol",
		Query:  ReadSingleSymbolStatsBySymbol_Operation,
		Variables: &__ReadSingleSymbolStatsBySymbolInput{
			Symbol: symbol,
		},
	}

	data_ = &ReadSingleSymbolStatsBySymbolResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ReadTickerStatsBySymbol.
const ReadTickerStatsBySymbol_Operation = `
query ReadTickerStatsBySymbol ($symbol: String!, $limit: Int!) {
	readTickerStatsBySymbol(symbol: $symbol, limit: $limit) {
		LiquidityEstimate
	}
}
`

func ReadTickerStatsBySymbol(
	ctx_ context.Context,
	client_ graphql.Client,
	symbol string,
	limit int,
) (data_ *ReadTickerStatsBySymbolResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ReadTickerStatsBySymbol",
		Query:  ReadTickerStatsBySymbol_Operation,
		Variables: &__ReadTickerStatsBySymbolInput{
			Symbol: symbol,
			Limit:  limit,
		},
	}

	data_ = &ReadTickerStatsBySymbolResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by ReadUserByEmail.
const ReadUserByEmail_Operation = `
query ReadUserByEmail ($email: String!) {
	readUserByEmail(email: $email) {
		id
		email
	}
}
`

func ReadUserByEmail(
	ctx_ context.Context,
	client_ graphql.Client,
	email string,
) (data_ *ReadUserByEmailResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "ReadUserByEmail",
		Query:  ReadUserByEmail_Operation,
		Variables: &__ReadUserByEmailInput{
			Email: email,
		},
	}

	data_ = &ReadUserByEmailResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpdateCounters.
const UpdateCounters_Operation = `
mutation UpdateCounters ($input: UpdateCountersInput!) {
	updateCounters(input: $input)
}
`

func UpdateCounters(
	ctx_ context.Context,
	client_ graphql.Client,
	input UpdateCountersInput,
) (data_ *UpdateCountersResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpdateCounters",
		Query:  UpdateCounters_Operation,
		Variables: &__UpdateCountersInput{
			Input: input,
		},
	}

	data_ = &UpdateCountersResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpsertLiquidityEstimate.
const UpsertLiquidityEstimate_Operation = `
mutation UpsertLiquidityEstimate ($symbol: String!, $liquidityEstimate: MeanInput!, $maxLiquidityEstimate: Float!, $minLiquidityEstimate: Float!) {
	upsertSymbolStats(input: {Symbol:$symbol,LiquidityEstimate:$liquidityEstimate,MaxLiquidityEstimate:$maxLiquidityEstimate,MinLiquidityEstimate:$minLiquidityEstimate}) {
		Symbol
		LiquidityEstimate {
			Avg
			Count
		}
		MaxLiquidityEstimate
		MinLiquidityEstimate
	}
}
`

func UpsertLiquidityEstimate(
	ctx_ context.Context,
	client_ graphql.Client,
	symbol string,
	liquidityEstimate model.MeanInput,
	maxLiquidityEstimate float64,
	minLiquidityEstimate float64,
) (data_ *UpsertLiquidityEstimateResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpsertLiquidityEstimate",
		Query:  UpsertLiquidityEstimate_Operation,
		Variables: &__UpsertLiquidityEstimateInput{
			Symbol:               symbol,
			LiquidityEstimate:    liquidityEstimate,
			MaxLiquidityEstimate: maxLiquidityEstimate,
			MinLiquidityEstimate: minLiquidityEstimate,
		},
	}

	data_ = &UpsertLiquidityEstimateResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The mutation executed by UpsertPositionCounts.
const UpsertPositionCounts_Operation = `
mutation UpsertPositionCounts ($symbol: String!, $positionCounts: [MeanInput]) {
	upsertSymbolStats(input: {Symbol:$symbol,PositionCounts:$positionCounts}) {
		Symbol
		PositionCounts {
			Avg
			Count
		}
	}
}
`

func UpsertPositionCounts(
	ctx_ context.Context,
	client_ graphql.Client,
	symbol string,
	positionCounts []model.MeanInput,
) (data_ *UpsertPositionCountsResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "UpsertPositionCounts",
		Query:  UpsertPositionCounts_Operation,
		Variables: &__UpsertPositionCountsInput{
			Symbol:         symbol,
			PositionCounts: positionCounts,
		},
	}

	data_ = &UpsertPositionCountsResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
