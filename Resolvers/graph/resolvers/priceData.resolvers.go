package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"cryptobotmanager.com/cbm-backend/Resolvers/graph/generated"
	"cryptobotmanager.com/cbm-backend/Resolvers/graph/model"
	"github.com/rs/zerolog/log"
)

// CreateHistoricPrices is the resolver for the createHistoricPrices field.
func (r *mutationResolver) CreateHistoricPrices(ctx context.Context, input *model.NewHistoricPriceInput) ([]*model.HistoricPrices, error) {
	log.Info().Msgf("Saving prices: %+v with Timestamp: %d", input.Pairs, input.Timestamp)

	// Assuming you want to save multiple HistoricPrices in the input
	insertedHistoricPrices, err := db.SaveHistoricPrices(input)
	if err != nil {
		return nil, err
	}

	// Assuming you want to return the insertedHistoricPrices and the timestamp
	return insertedHistoricPrices, nil
}

// CreateHistoricKline is the resolver for the createHistoricKline field.
func (r *mutationResolver) CreateHistoricKline(ctx context.Context, input *model.NewHistoricKlineDataInput) ([]*model.HistoricKlineData, error) {
	panic(fmt.Errorf("not implemented: CreateHistoricKline - createHistoricKline"))
}

// DeleteHistoricPrices is the resolver for the deleteHistoricPrices field.
func (r *mutationResolver) DeleteHistoricPrices(ctx context.Context, timestamp int) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteHistoricPrices - deleteHistoricPrices"))
}

// GetHistoricPrice is the resolver for the getHistoricPrice field.
func (r *queryResolver) GetHistoricPrice(ctx context.Context, symbol string, limit *int) ([]*model.HistoricPrices, error) {
	panic(fmt.Errorf("not implemented: GetHistoricPrice - getHistoricPrice"))
}

// GetHistoricPricesAtTimestamp is the resolver for the getHistoricPricesAtTimestamp field.
func (r *queryResolver) GetHistoricPricesAtTimestamp(ctx context.Context, timestamp int) ([]*model.HistoricPrices, error) {
	panic(fmt.Errorf("not implemented: GetHistoricPricesAtTimestamp - getHistoricPricesAtTimestamp"))
}

// GetHistoricKlineData is the resolver for the getHistoricKlineData field.
func (r *queryResolver) GetHistoricKlineData(ctx context.Context, symbol string, limit *int) ([]*model.HistoricKlineData, error) {
	panic(fmt.Errorf("not implemented: GetHistoricKlineData - getHistoricKlineData"))
}

// GetUniqueTimestampCount is the resolver for the getUniqueTimestampCount field.
func (r *queryResolver) GetUniqueTimestampCount(ctx context.Context) (int, error) {
	panic(fmt.Errorf("not implemented: GetUniqueTimestampCount - getUniqueTimestampCount"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
