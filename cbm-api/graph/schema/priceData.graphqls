# === Price Data Domain ===

# --- Types ---

# Represents a price pair for a trading symbol
type Pair {
    Symbol: String!              # Trading symbol (e.g., BTCUSDT)
    Price: String!               # Last traded price
    PercentageChange: String     # Optional: percentage change over period
}

# Represents a snapshot of historic prices at a timestamp
type HistoricPrices {
    Pair: [Pair!]!               # List of price pairs
    Timestamp: Int!              # Epoch timestamp
    CreatedAt: DateTime!         # When this snapshot was created
}

# Represents OHLC (Open, High, Low, Close) data for a symbol
type OHLC {
    OpenPrice:   String!
    HighPrice:   String!
    LowPrice:    String!
    ClosePrice:  String!
    TradeVolume: String!
    Symbol:      String!
}

# Represents 24h ticker statistics for a symbol
type TickerStats {
    Symbol:            String!   # Trading symbol
    PriceChange:       String!   # Absolute price change over 24h
    PriceChangePct:    String!   # Percentage price change over 24h
    QuoteVolume:       String!   # Quote asset volume
    Volume:            String!   # Base asset volume
    TradeCount:        Int!      # Number of trades
    HighPrice:         String!   # 24h high price
    LowPrice:          String!   # 24h low price
    LastPrice:         String!   # Last traded price
    LiquidityEstimate: String    # Optional: estimated liquidity
}

# Represents a snapshot of ticker stats at a timestamp
type HistoricTickerStats {
    Timestamp: Int!              # Epoch timestamp
    Stats: [TickerStats!]!       # List of ticker stats
    CreatedAt: DateTime!         # When this snapshot was created
}

# Represents a snapshot of kline (candlestick) data
type HistoricKlineData {
    opentime: Int!               # Open time for the kline
    coins: [OHLC!]!              # List of OHLC data for coins
}

# --- Inputs ---

# Input for a price pair
input PairInput {
    Symbol: String!
    Price: String!
    PercentageChange: String
}

# Input for creating a historic price snapshot
input NewHistoricPriceInput {
    Pairs: [PairInput!]!
    Timestamp: Int!
}

# Input for OHLC data
input OHLCInput {
    OpenPrice:   String!
    HighPrice:   String!
    LowPrice:    String!
    ClosePrice:  String!
    TradeVolume: String!
    Symbol:      String!
}

# Input for 24h ticker statistics
input TickerStatsInput {
    Symbol:            String!
    PriceChange:       String!
    PriceChangePct:    String!
    QuoteVolume:       String!
    Volume:            String!
    TradeCount:        Int!
    HighPrice:         String!
    LowPrice:          String!
    LastPrice:         String!
    LiquidityEstimate: String
}

# Input for creating a historic ticker stats snapshot
input NewHistoricTickerStatsInput {
    Timestamp: Int!
    Stats: [TickerStatsInput!]!
}

# Input for creating historic kline data
input NewHistoricKlineDataInput {
    Opentime: Int!
    Coins:    [OHLCInput!]!
}

# --- Mutations ---
extend type Mutation {
    "Creates an array of Historic Price pairs"
    createHistoricPrices(input: NewHistoricPriceInput): [HistoricPrices!]!

    "Creates an array of Historic Kline Data"
    createHistoricKline(input: NewHistoricKlineDataInput): [HistoricKlineData!]!

    "Deletes all prices data for the matching given timestamp"
    deleteHistoricPrices(Timestamp: Int!): Boolean!

    "Creates an array of 24h Ticker Stats at a given timestamp"
    createHistoricTickerStats(input: NewHistoricTickerStatsInput!): [HistoricTickerStats!]!

    "Deletes all Ticker Stats at a specific timestamp"
    deleteHistoricTickerStats(Timestamp: Int!): Boolean!
}

# --- Queries ---
extend type Query {
    "Fetches price data for a given symbol up to a given limit of records"
    readHistoricPrice(symbol: String!, limit: Int): [HistoricPrices!]!

    "Gets all prices data at a given timestamp"
    readHistoricPricesAtTimestamp(Timestamp: Int!): [HistoricPrices!]!

    "Fetches kline data data for a given symbol up to a given limit of records"
  readHistoricKlineData(symbol: String!, limit: Int): [HistoricKlineData!]!

    "Returns a count of timestamps in the DB"
    readUniqueTimestampCount: Int!

    "This will give you a []string of all available trading symbols in your HistoricPrices collection."
    readAvailableSymbols: [String!]!

    "Gets all 24h Ticker Stats at a specific timestamp"
    readHistoricTickerStatsAtTimestamp(Timestamp: Int!): [HistoricTickerStats!]!

    "Fetches TickerStats history for a given symbol (e.g., to chart volatility or volume)"
    readTickerStatsBySymbol(symbol: String!, limit: Int): [TickerStats!]!
}