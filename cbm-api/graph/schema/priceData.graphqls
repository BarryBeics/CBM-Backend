type Pair {
	Symbol: String!
	Price: String!
  }
  
  input PairInput {
	Symbol: String!
	Price: String!
  }
  
  type HistoricPrices {
	Pair: [Pair!]
	Timestamp: Int!
	CreatedAt: DateTime!
  }
  
  input NewHistoricPriceInput {
	Pairs: [PairInput!]!
	Timestamp: Int!
  }
  
  type OHLC {
	  OpenPrice:   String!
	  HighPrice:   String!
	  LowPrice:    String! 
	  ClosePrice:  String! 
	  TradeVolume: String! 
	  Symbol:      String! 
  }
  
  input OHLCInput {
	  OpenPrice:   String!
	  HighPrice:   String!
	  LowPrice:    String! 
	  ClosePrice:  String! 
	  TradeVolume: String! 
	  Symbol:      String! 
  }
  
  type HistoricKlineData {
  opentime: Int!
  coins: [OHLC!]!
}
  
  input NewHistoricKlineDataInput {
	  Opentime: Int!
	  Coins:    [OHLCInput!]!
  }
  
  
  extend type Mutation {
	"Creates an array of Historic Price pairs"
	createHistoricPrices(input: NewHistoricPriceInput): [HistoricPrices!]!
  
	"Creates an array of Historic Kline Data"
	createHistoricKline(input: NewHistoricKlineDataInput): [HistoricKlineData!]!
  
	"Deletes all prices data for the matching given timestamp"
	deleteHistoricPrices(Timestamp: Int!): Boolean!
  }
  
  extend type Query {
	"Fetches price data for a given symbol up to a given limit of records"
	getHistoricPrice(symbol: String!, limit: Int): [HistoricPrices!]!
  
	"Gets all prices data at a given timestamp"
	getHistoricPricesAtTimestamp(Timestamp: Int!): [HistoricPrices!]!
  
	"Fetches kline data data for a given symbol up to a given limit of records"
	getHistoricKlineData(symbol: String!, limit: Int): [HistoricKlineData!]!
  
	"Returns a count of timestamps in the DB"
	getUniqueTimestampCount: Int!

    "This will give you a []string of all available trading symbols in your HistoricPrices collection."
	availableSymbols: [String!]!
  }