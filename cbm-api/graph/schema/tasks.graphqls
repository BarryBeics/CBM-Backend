# ==========================
# Types
# ==========================

type Task {
    id: ID!
    title: String!
    description: String
    status: String!            # inbox, nextAction, scheduled, etc.
    labels: [String]           # use these for meeting, call, design, etc.
    assignedTo: String
    dueDate: String
    deferDate: String          # optional, for delayed tasks
    department: String         # e.g. sales, marketing, programming
    projectId: String
    duration: Int              # track how long a task took
    createdAt: String!
    updatedAt: String!
}

type Project {
    id: ID!
    title: String!           # Now includes structured naming (e.g. "Q2-2025 | Marketing | New Launch")
    sop: Boolean!            # For standard operating procedure templates â€” good addition
    description: String
    labels: [String]         # Used for filtering/grouping (e.g. ["Q2", "marketing"])
    assignedTo: String
    dueDate: String
    status: String!          # "active", "completed", "archived"
    createdAt: String!
    updatedAt: String!
    tasks: [Task]
}

# ==========================
# Input Types
# ==========================

input CreateTaskInput {
    title: String!
    description: String
    status: String = "inbox"
    labels: [String]
    assignedTo: String
    dueDate: String
    deferDate: String
    department: String
    projectId: String
    duration: Int
}

input UpdateTaskInput {
    id: ID!
    title: String
    description: String
    status: String
    labels: [String]
    assignedTo: String
    dueDate: String
    deferDate: String
    department: String
    projectId: String
    duration: Int
}

input CreateProjectInput {
    title: String!
    sop: Boolean = false
    description: String
    labels: [String]
    assignedTo: String
    dueDate: String
    status: String = "active"
}

input UpdateProjectInput {
    id: ID!
    title: String
    sop: Boolean
    description: String
    labels: [String]
    assignedTo: String
    dueDate: String
    status: String
}

input ProjectFilterInput {
    sop: Boolean
}


# ==========================
# Mutations
# ==========================

extend type Mutation {
    # ==========================
    # Tasks
    # ==========================
    "Create a new task"
    createTask(input: CreateTaskInput!): Task

    "Update an existing task"
    updateTask(input: UpdateTaskInput!): Task

    "Delete a task by ID"
    deleteTask(id: ID!): Boolean

    # ==========================
    # Projects
    # ==========================

    "Create a new project"
    createProject(input: CreateProjectInput!): Project

    "Update an existing project"
    updateProject(input: UpdateProjectInput!): Project

    "Delete a project by ID"
    deleteProject(id: ID!): Boolean
}


# ==========================
# Queries
# ==========================

extend type Query {
    # ==========================
    # Tasks
    # ==========================
    "Get a single task by ID"
    readTaskById(id: ID!): Task

    "Get all tasks"
    readAllTasks: [Task]

    # ==========================
    # Projects
    # ==========================

    "Get a single project by ID"
    readSingleProjectById(id: ID!): Project

    "Get projects filtered by SOP standard operating proceedure"
    readProjectsFilter(filter: ProjectFilterInput): [Project!]!
}


