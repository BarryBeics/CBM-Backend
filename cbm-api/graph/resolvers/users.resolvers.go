package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"cryptobotmanager.com/cbm-backend/cbm-api/graph/model"
	"github.com/rs/zerolog/log"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	user, err := db.CreateUser(ctx, input)
	if err != nil {
		log.Error().Err(err).Msg("Error creating user:")
		return nil, err
	}

	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.User, error) {
	task, err := db.UpdateUser(ctx, input)
	if err != nil {
		log.Error().Err(err).Msg("Error updating task:")
		return nil, err
	}

	return task, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, email string) (*bool, error) {
	success, err := db.DeleteUserByEmail(ctx, email)
	if err != nil {
		log.Error().Err(err).Msg("Error deleting user:")
		return nil, err
	}

	return &success, nil
}

// ReadUserByEmail is the resolver for the readUserByEmail field.
func (r *queryResolver) ReadUserByEmail(ctx context.Context, email string) (*model.User, error) {
	user, err := db.ReadUserByEmail(ctx, email)
	if err != nil {
		log.Error().Err(err).Msg("Error fetching user by email:")
		return nil, err
	}

	return user, nil
}

// ReadAllUsers is the resolver for the readAllUsers field.
func (r *queryResolver) ReadAllUsers(ctx context.Context) ([]*model.User, error) {
	users, err := db.ReadAllUsers(ctx)
	if err != nil {
		log.Error().Err(err).Msg("Error fetching all users:")
		return nil, err
	}

	return users, nil
}

// ReadUsersByRole is the resolver for the readUsersByRole field.
func (r *queryResolver) ReadUsersByRole(ctx context.Context, role string) ([]*model.User, error) {
	users, err := db.ReadUserByRole(ctx, role)
	if err != nil {
		log.Error().Err(err).Msg("Error fetching user by email:")
		return nil, err
	}

	return users, nil
}
