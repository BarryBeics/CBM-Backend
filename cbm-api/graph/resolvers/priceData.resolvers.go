package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"cryptobotmanager.com/cbm-backend/cbm-api/graph/model"
	"github.com/rs/zerolog/log"
)

// CreateHistoricPrices is the resolver for the createHistoricPrices field.
func (r *mutationResolver) CreateHistoricPrices(ctx context.Context, input *model.NewHistoricPriceInput) ([]*model.HistoricPrices, error) {
	log.Debug().Msgf("Saving prices: %+v with Timestamp: %d", input.Pairs, input.Timestamp)

	// Assuming you want to save multiple HistoricPrices in the input
	insertedHistoricPrices, err := db.SaveHistoricPrices(input)
	if err != nil {
		return nil, err
	}

	// Assuming you want to return the insertedHistoricPrices and the timestamp
	return insertedHistoricPrices, nil
}

// CreateHistoricKlineData is the resolver for the getHistoricKlineData field.
func (r *mutationResolver) CreateHistoricKline(ctx context.Context, input *model.NewHistoricKlineDataInput) ([]*model.HistoricKlineData, error) {
	// Assuming you want to save multiple HistoricKlineData in the input
	insertedHistoricKlineData, err := db.SaveHistoricKlineData(input)
	if err != nil {
		return nil, err
	}

	// Assuming you want to return the insertedHistoricKlineData and the timestamp
	return insertedHistoricKlineData, nil
}

// DeleteHistoricPrices is the resolver for the deleteHistoricPrices field.
func (r *mutationResolver) DeleteHistoricPrices(ctx context.Context, timestamp int) (bool, error) {
	err := db.DeleteHistoricPricesByTimestamp(ctx, timestamp)

	if err != nil {
		log.Error().Err(err).Msg("Error getting Unique Timestamp Count")
		return false, err
	}

	return true, nil
}

// GetHistoricPrice is the resolver for the getHistoricPrice field.
func (r *queryResolver) GetHistoricPrice(ctx context.Context, symbol string, limit *int, ascending *bool) ([]*model.HistoricPrices, error) {
	asc := false
	if ascending != nil {
		asc = *ascending
	}

	l := 0
	if limit != nil {
		l = *limit
	}

	historicPrices, err := db.HistoricPricesBySymbol(symbol, l, asc)
	if err != nil {
		log.Error().Err(err).Msg("Error getting historic prices")
		return nil, err
	}

	// Convert slice of model.HistoricPrice to slice of *model.HistoricPrice
	var result []*model.HistoricPrices
	for i := range historicPrices {
		result = append(result, &historicPrices[i])
	}

	// Return the slice of pointers to historic prices
	return result, nil
}

// GetHistoricPricesAtTimestamp is the resolver for the getHistoricPricesAtTimestamp field.
func (r *queryResolver) GetHistoricPricesAtTimestamp(ctx context.Context, timestamp int) ([]*model.HistoricPrices, error) {
	log.Info().Msgf("Fetching prices at Timestamp: %d", timestamp)

	historicPrices, err := db.HistoricPricesAtTimestamp(timestamp)
	if err != nil {
		log.Error().Err(err).Msg("Error getting historic prices at position")
		return nil, err
	}

	// Convert slice of model.HistoricPrices to slice of *model.HistoricPrices
	var result []*model.HistoricPrices
	for i := range historicPrices {
		result = append(result, &historicPrices[i])
	}

	log.Info().Msgf("Retrieved prices: %+v", historicPrices)

	// Return the slice of pointers to historic prices
	return result, nil
}

// GetHistoricKlineData is the resolver for the getHistoricKlineData field.
func (r *queryResolver) GetHistoricKlineData(ctx context.Context, symbol string, limit *int) ([]*model.HistoricKlineData, error) {
	historicKlineData, err := db.HistoricKlineDataBySymbol(symbol, *limit)
	if err != nil {
		log.Error().Err(err).Msg("Error getting historic Kline data")
		return nil, err
	}

	// Convert slice of model.HistoricKlineData to slice of *model.HistoricKlineData
	var result []*model.HistoricKlineData
	for i := range historicKlineData {
		result = append(result, &historicKlineData[i])
	}

	// Return the slice of pointers to historic kline data
	return result, nil
}

// GetUniqueTimestampCount fetches the count of unique timestamps.
func (r *queryResolver) GetUniqueTimestampCount(ctx context.Context) (int, error) {
	int, err := db.GetUniqueTimestampCount(ctx)

	if err != nil {
		log.Error().Err(err).Msg("Error getting Unique Timestamp Count")
		return 0, err
	}

	return int, nil
}
