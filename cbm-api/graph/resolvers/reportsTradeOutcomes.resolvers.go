package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"cryptobotmanager.com/cbm-backend/cbm-api/graph/model"
	"github.com/rs/zerolog/log"
)

// CreateTradeOutcomeReport is the resolver for the createTradeOutcomeReport field.
func (r *mutationResolver) CreateTradeOutcomeReport(ctx context.Context, input *model.NewTradeOutcomeReport) (*model.TradeOutcomeReport, error) {
	return db.SaveTradeOutcomeReport(input), nil
}

// DeleteOutcomeReports is the resolver for the deleteOutcomeReports field.
func (r *mutationResolver) DeleteOutcomeReports(ctx context.Context, timestamp int) (bool, error) {
	// Assuming db is an instance of your DB type
	success, err := db.DeleteTradeOutcomeReport(ctx, timestamp)
	if err != nil {
		log.Error().Err(err).Msg("Error deleting trade outcome:")
		return false, err // Return a boolean value, not a pointer to a boolean
	}

	return success, nil
}

// TradeOutcomeReport is the resolver for the TradeOutcomeReport field.
func (r *queryResolver) TradeOutcomeReport(ctx context.Context, id string) (*model.TradeOutcomeReport, error) {
	return db.FindTradeOutcomeReportByID(id), nil
}

// TradeOutcomes retrieves trade outcome reports based on the BotName.
func (r *queryResolver) TradeOutcomes(ctx context.Context, botName string) ([]*model.TradeOutcomeReport, error) {
	return db.TradeOutcomeReportsByBotName(ctx, botName)
}

// TradeOutcomesInFocus is the resolver for the TradeOutcomesInFocus field.
func (r *queryResolver) TradeOutcomesInFocus(ctx context.Context, botName string, marketStatus string, limit *int) ([]*model.TradeOutcomeReport, error) {
	return db.TradeOutcomeReportsByBotNameAndMarketStatus(ctx, botName, marketStatus, *limit)
}

// TradeOutcomeReports is the resolver for the TradeOutcomeReports field.
func (r *queryResolver) TradeOutcomeReports(ctx context.Context) ([]*model.TradeOutcomeReport, error) {
	return db.AllTradeOutcomeReports(), nil
}
