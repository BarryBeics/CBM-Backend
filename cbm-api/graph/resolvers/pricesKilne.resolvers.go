package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"cryptobotmanager.com/cbm-backend/cbm-api/graph/model"
	"github.com/rs/zerolog/log"
)

// CreateHistoricKlineData is the resolver for the getHistoricKlineData field.
func (r *mutationResolver) CreateHistoricKline(ctx context.Context, input *model.NewHistoricKlineDataInput) ([]*model.HistoricKlineData, error) {
	// Assuming you want to save multiple HistoricKlineData in the input
	insertedHistoricKlineData, err := db.SaveHistoricKlineData(input)
	if err != nil {
		return nil, err
	}

	// Assuming you want to return the insertedHistoricKlineData and the timestamp
	return insertedHistoricKlineData, nil
}

// GetHistoricKlineData is the resolver for the getHistoricKlineData field.
func (r *queryResolver) GetHistoricKlineData(ctx context.Context, symbol string, limit *int) ([]*model.HistoricKlineData, error) {
	historicKlineData, err := db.HistoricKlineDataBySymbol(symbol, *limit)
	if err != nil {
		log.Error().Err(err).Msg("Error getting historic Kline data")
		return nil, err
	}

	// Convert slice of model.HistoricKlineData to slice of *model.HistoricKlineData
	var result []*model.HistoricKlineData
	for i := range historicKlineData {
		result = append(result, &historicKlineData[i])
	}

	// Return the slice of pointers to historic kline data
	return result, nil
}
