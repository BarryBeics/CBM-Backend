package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"cryptobotmanager.com/cbm-backend/cbm-api/graph/model"
	"github.com/rs/zerolog/log"
)

// ==========================
// === Ticker Stats ===
// ==========================

// CreateHistoricTickerStats is the resolver for the createHistoricTickerStats field.
func (r *mutationResolver) CreateHistoricTickerStats(ctx context.Context, input model.NewHistoricTickerStatsInput) ([]*model.HistoricTickerStats, error) {
	// Assuming you want to save multiple HistoricKlineData in the input
	insertedHistoricKlineData, err := db.CreateHistoricTickerStats(input)
	if err != nil {
		return nil, err
	}

	// Assuming you want to return the insertedHistoricKlineData and the timestamp
	return insertedHistoricKlineData, nil
}

// ReadTickerStatsBySymbol is the resolver for the readTickerStatsBySymbol field.
func (r *queryResolver) ReadTickerStatsBySymbol(ctx context.Context, symbol string, limit *int) ([]*model.TickerStats, error) {
	log.Info().
		Str("symbol", symbol).
		Int("limit", func() int {
			if limit != nil {
				return *limit
			}
			return 0
		}()).
		Msg("GetTickerStatsBySymbol called")

	l := 0
	if limit != nil {
		l = *limit
	}

	tickerStats, err := db.ReadTickerStatsBySymbol(symbol, l)
	if err != nil {
		log.Error().Err(err).Msg("Error getting ticker stats by symbol")
		return nil, err
	}

	return tickerStats, nil // already []*model.TickerStats
}

// ReadHistoricTickerStatsAtTimestamp is the resolver for the readHistoricTickerStatsAtTimestamp field.
func (r *queryResolver) ReadHistoricTickerStatsAtTimestamp(ctx context.Context, timestamp int) ([]*model.HistoricTickerStats, error) {
	log.Info().Msgf("Fetching historic ticker stats at Timestamp: %d", timestamp)

	historicTickerStats, err := db.ReadHistoricTickerStatsAtTimestamp(timestamp)
	if err != nil {
		log.Error().Err(err).Msg("Error getting historic ticker stats at timestamp")
		return nil, err
	}

	// Convert slice of model.HistoricTickerStats to slice of *model.HistoricTickerStats
	var result []*model.HistoricTickerStats
	for i := range historicTickerStats {
		result = append(result, &historicTickerStats[i])
	}

	log.Info().Msgf("Retrieved ticker stats: %+v", historicTickerStats)

	// Return the slice of pointers to historic ticker stats
	return result, nil
}

// / DeleteHistoricTickerStats is the resolver for the deleteHistoricTickerStats field.
func (r *mutationResolver) DeleteHistoricTickerStats(ctx context.Context, timestamp int) (bool, error) {
	err := db.DeleteHistoricTickerStatsByTimestamp(ctx, timestamp)

	if err != nil {
		log.Error().Err(err).Msg("Error getting Unique Timestamp Count")
		return false, err
	}

	return true, nil
}

// ==========================
// === Symbol Stats ===
// ==========================

// UpsertSymbolStats is the resolver for the upsertSymbolStats field.
func (r *mutationResolver) UpsertSymbolStats(ctx context.Context, input *model.UpsertSymbolStatsInput) (*model.SymbolStats, error) {
	return db.UpsertSymbolStats(input), nil
}

// ReadAllSymbolStats is the resolver for the ReadAllSymbolStats field.
func (r *queryResolver) ReadAllSymbolStats(ctx context.Context) ([]*model.SymbolStats, error) {
	return db.ReadAllSymbolStats(), nil
}

// ReadSingleSymbolStatsBySymbol is the resolver for the ReadSingleSymbolStatsBySymbol field.
func (r *queryResolver) ReadSingleSymbolStatsBySymbol(ctx context.Context, symbol string) (*model.SymbolStats, error) {
	return db.ReadSingleSymbolStatsBySymbol(symbol), nil
}

// DeleteSymbolStats is the resolver for the deleteSymbolStats field.
func (r *mutationResolver) DeleteSymbolStats(ctx context.Context, symbol string) (bool, error) {
	success, err := db.DeleteSymbolStats(ctx, symbol)
	return success, err
}
