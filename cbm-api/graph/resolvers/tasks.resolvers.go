package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"cryptobotmanager.com/cbm-backend/cbm-api/graph/model"
	"github.com/rs/zerolog/log"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.Task, error) {
	task, err := db.CreateTask(ctx, input)
	if err != nil {
		log.Error().Err(err).Msg("Error creating task:")
		return nil, err
	}

	return task, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, input model.UpdateTaskInput) (*model.Task, error) {
	task, err := db.UpdateTask(ctx, input)
	if err != nil {
		log.Error().Err(err).Msg("Error updating task:")
		return nil, err
	}

	return task, nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (*bool, error) {
	success, err := db.DeleteTaskByID(ctx, id)
	if err != nil {
		log.Error().Err(err).Msg("Error deleting task:")
		return nil, err
	}

	return &success, nil
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input model.CreateProjectInput) (*model.Project, error) {
	project, err := db.CreateProject(ctx, input)
	if err != nil {
		log.Error().Err(err).Msg("Error creating project:")
		return nil, err
	}
	return project, nil
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, input model.UpdateProjectInput) (*model.Project, error) {
	project, err := db.UpdateProject(ctx, input)
	if err != nil {
		log.Error().Err(err).Msg("Error updating project:")
		return nil, err
	}
	return project, nil
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (*bool, error) {
	success, err := db.DeleteProjectByID(ctx, id)
	if err != nil {
		log.Error().Err(err).Msg("Error deleting project:")
		return nil, err
	}
	return &success, nil
}

// TaskByID is the resolver for the taskById field.
func (r *queryResolver) TaskByID(ctx context.Context, id string) (*model.Task, error) {
	task, err := db.GetTaskByID(ctx, id)
	if err != nil {
		log.Error().Err(err).Msg("Error fetching task by ID:")
		return nil, err
	}

	return task, nil
}

// AllTasks is the resolver for the allTasks field.
func (r *queryResolver) AllTasks(ctx context.Context) ([]*model.Task, error) {
	tasks, err := db.GetAllTasks(ctx)
	if err != nil {
		log.Error().Err(err).Msg("Error fetching tasks:")
		return nil, err
	}

	return tasks, nil
}

// ProjectByID is the resolver for the projectById field.
func (r *queryResolver) ProjectByID(ctx context.Context, id string) (*model.Project, error) {
	project, err := db.GetProjectByID(ctx, id)
	if err != nil {
		log.Error().Err(err).Msg("Error fetching project by ID:")
		return nil, err
	}

	// Fetch tasks manually
	tasks, err := db.GetTasksByProjectID(ctx, project.ID)
	if err != nil {
		log.Error().Err(err).Msg("Error fetching tasks for project:")
		return nil, err
	}
	project.Tasks = tasks

	return project, nil
}

// AllProjects is the resolver for the allProjects field.
func (r *queryResolver) AllProjects(ctx context.Context) ([]*model.Project, error) {
	projects, err := db.GetAllProjects(ctx)
	if err != nil {
		log.Error().Err(err).Msg("Error fetching projects:")
		return nil, err
	}

	// For each project, fetch tasks
	for _, project := range projects {
		tasks, err := db.GetTasksByProjectID(ctx, project.ID)
		if err != nil {
			log.Error().Err(err).Str("projectID", project.ID).Msg("Error fetching tasks")
			continue // or handle accordingly
		}
		project.Tasks = tasks
	}

	return projects, nil
}
